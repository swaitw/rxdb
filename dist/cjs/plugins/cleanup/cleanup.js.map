{"version":3,"file":"cleanup.js","names":["_index","require","_index2","_cleanupHelper","_hooks","_rxjs","RXSTORAGE_CLEANUP_QUEUE","PROMISE_RESOLVE_TRUE","startCleanupForRxCollection","rxCollection","rxDatabase","database","cleanupPolicy","Object","assign","DEFAULT_CLEANUP_POLICY","initialCleanupWait","closed","cleanupRxCollection","runCleanupAfterDelete","collection","promiseWait","minimumCollectionAge","waitForLeadership","storageInstance","isDone","awaitReplicationsInSync","replicationStates","REPLICATION_STATE_BY_COLLECTION","get","Promise","all","map","replicationState","isStopped","awaitInSync","then","requestIdlePromise","cleanup","minimumDeletedTime","runAsyncPluginHooks","collectionName","name","databaseName","firstValueFrom","eventBulks$","catch","runEach"],"sources":["../../../../src/plugins/cleanup/cleanup.ts"],"sourcesContent":["import type { RxCleanupPolicy, RxCollection } from '../../types/index.d.ts';\nimport { PROMISE_RESOLVE_TRUE } from '../../plugins/utils/index.ts';\nimport { REPLICATION_STATE_BY_COLLECTION } from '../replication/index.ts';\nimport { DEFAULT_CLEANUP_POLICY } from './cleanup-helper.ts';\nimport { runAsyncPluginHooks } from '../../hooks.ts';\nimport { filter, firstValueFrom } from 'rxjs';\n\n/**\n * Even on multiple databases,\n * the calls to RxStorage().cleanup()\n * must never run in parallel.\n * The cleanup is a background task which should\n * not affect the performance of other, more important tasks.\n */\nlet RXSTORAGE_CLEANUP_QUEUE: Promise<boolean> = PROMISE_RESOLVE_TRUE;\n\nexport async function startCleanupForRxCollection(\n    rxCollection: RxCollection\n) {\n    const rxDatabase = rxCollection.database;\n    const cleanupPolicy = Object.assign(\n        {},\n        DEFAULT_CLEANUP_POLICY,\n        rxDatabase.cleanupPolicy ? rxDatabase.cleanupPolicy : {}\n    );\n\n\n    await initialCleanupWait(rxCollection, cleanupPolicy);\n    if (rxCollection.closed) {\n        return;\n    }\n\n    // initially cleanup the collection\n    await cleanupRxCollection(rxCollection, cleanupPolicy);\n\n    /**\n     * Afterwards we listen to deletes\n     * and only re-run the cleanup after\n     * minimumDeletedTime is reached.\n     */\n    await runCleanupAfterDelete(rxCollection, cleanupPolicy);\n}\n\n\nexport async function initialCleanupWait(collection: RxCollection, cleanupPolicy: RxCleanupPolicy) {\n    /**\n     * Wait until minimumDatabaseInstanceAge is reached\n     * or collection is closed.\n     */\n    await collection.promiseWait(cleanupPolicy.minimumCollectionAge);\n    if (collection.closed) {\n        return;\n    }\n\n    if (cleanupPolicy.waitForLeadership) {\n        await collection.database.waitForLeadership();\n    }\n}\n\n/**\n * Runs the cleanup for a single RxCollection\n */\nexport async function cleanupRxCollection(\n    rxCollection: RxCollection,\n    cleanupPolicy: RxCleanupPolicy\n) {\n    const rxDatabase = rxCollection.database;\n    const storageInstance = rxCollection.storageInstance;\n\n    // run cleanup() until it returns true\n    let isDone = false;\n    while (!isDone && !rxCollection.closed) {\n        if (cleanupPolicy.awaitReplicationsInSync) {\n            const replicationStates = REPLICATION_STATE_BY_COLLECTION.get(rxCollection);\n            if (replicationStates) {\n                await Promise.all(\n                    replicationStates.map(replicationState => {\n                        if (!replicationState.isStopped()) {\n                            return replicationState.awaitInSync();\n                        }\n                    })\n                );\n            }\n        }\n        if (rxCollection.closed) {\n            return;\n        }\n        RXSTORAGE_CLEANUP_QUEUE = RXSTORAGE_CLEANUP_QUEUE\n            .then(async () => {\n                if (rxCollection.closed) {\n                    return true;\n                }\n                await rxDatabase.requestIdlePromise();\n                return storageInstance.cleanup(cleanupPolicy.minimumDeletedTime);\n            });\n        isDone = await RXSTORAGE_CLEANUP_QUEUE;\n    }\n    await runAsyncPluginHooks('postCleanup', {\n        collectionName: rxCollection.name,\n        databaseName: rxDatabase.name\n    });\n}\n\nexport async function runCleanupAfterDelete(\n    rxCollection: RxCollection,\n    cleanupPolicy: RxCleanupPolicy\n) {\n    while (!rxCollection.closed) {\n        /**\n         * In theory we should wait here until a document is deleted.\n         * But this would mean we have to search through all events ever processed.\n         * So instead we just wait for any write event and then we anyway throttle\n         * the calls with the promiseWait() below.\n         */\n        await firstValueFrom(rxCollection.eventBulks$).catch(() => { });\n\n        await rxCollection.promiseWait(cleanupPolicy.runEach);\n        if (rxCollection.closed) {\n            return;\n        }\n        await cleanupRxCollection(rxCollection, cleanupPolicy);\n    }\n}\n"],"mappings":"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","ignoreList":[]}