{"version":3,"file":"index.js","names":["_cryptoJs","_interopRequireDefault","require","_pluginHelpers","_rxError","_rxStorageHelper","_index","AES","enc","cryptoEnc","pkg","MINIMUM_PASSWORD_LENGTH","exports","encryptString","value","password","encrypted","encrypt","toString","decryptString","cipherText","newRxError","args","decrypted","decrypt","ret","Utf8","wrappedKeyEncryptionCryptoJsStorage","Object","assign","storage","createStorageInstance","params","validatePassword","hasEncryption","schema","retInstance","database","databaseName","collection","collectionName","schemaWithoutEncrypted","clone","attachments","ensureNotFalsy","forEach","key","properties","type","instance","modifyToStorage","docData","cloneWithoutAttachments","path","getProperty","stringValue","JSON","stringify","setProperty","newAttachments","entries","_attachments","id","attachment","useAttachment","flatClone","data","dataString","b64EncodeUnicode","modifyFromStorage","decryptedParsed","parse","modifyAttachmentFromStorage","attachmentData","b64DecodeUnicode","wrapRxStorageInstance","newRxTypeError","length","minPassLength"],"sources":["../../../../src/plugins/encryption-crypto-js/index.ts"],"sourcesContent":["/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\nimport pkg from 'crypto-js';\nconst { AES, enc: cryptoEnc } = pkg;\n\nimport { wrapRxStorageInstance } from '../../plugin-helpers.ts';\nimport { newRxError, newRxTypeError } from '../../rx-error.ts';\nimport { hasEncryption } from '../../rx-storage-helper.ts';\nimport type {\n    InternalStoreDocType,\n    RxAttachmentWriteData,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams\n} from '../../types/index.d.ts';\nimport {\n    b64DecodeUnicode,\n    b64EncodeUnicode,\n    clone,\n    ensureNotFalsy,\n    flatClone,\n    getProperty,\n    setProperty\n} from '../../plugins/utils/index.ts';\n\nexport const MINIMUM_PASSWORD_LENGTH: 8 = 8;\n\n\nexport function encryptString(value: string, password: string): string {\n    const encrypted = AES.encrypt(value, password);\n    return encrypted.toString();\n}\n\nexport function decryptString(cipherText: string, password: any): string {\n    /**\n     * Trying to decrypt non-strings\n     * will cause no errors and will be hard to debug.\n     * So instead we do this check here.\n     */\n    if (typeof cipherText !== 'string') {\n        throw newRxError('SNH', {\n            args: {\n                cipherText\n            }\n        });\n    }\n\n    const decrypted = AES.decrypt(cipherText, password);\n    const ret = decrypted.toString(cryptoEnc.Utf8);\n    return ret;\n}\n\nexport type InternalStorePasswordDocType = InternalStoreDocType<{\n    hash: string;\n}>;\n\nexport function wrappedKeyEncryptionCryptoJsStorage<Internals, InstanceCreationOptions>(\n    args: {\n        storage: RxStorage<Internals, InstanceCreationOptions>;\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n    return Object.assign(\n        {},\n        args.storage,\n        {\n            async createStorageInstance<RxDocType>(\n                params: RxStorageInstanceCreationParams<RxDocType, any>\n            ) {\n                if (typeof params.password !== 'undefined') {\n                    validatePassword(params.password as any);\n                }\n\n                if (!hasEncryption(params.schema)) {\n                    const retInstance = await args.storage.createStorageInstance(params);\n                    return retInstance;\n                }\n\n                if (!params.password) {\n                    throw newRxError('EN3', {\n                        database: params.databaseName,\n                        collection: params.collectionName,\n                        schema: params.schema\n                    });\n                }\n                const password = params.password;\n\n                const schemaWithoutEncrypted: RxJsonSchema<RxDocumentData<RxDocType>> = clone(params.schema);\n                delete schemaWithoutEncrypted.encrypted;\n                if (schemaWithoutEncrypted.attachments) {\n                    schemaWithoutEncrypted.attachments.encrypted = false;\n                }\n\n                /**\n                 * Encrypted data is always stored as string\n                 * so we have to change the schema to have \"type\": \"string\"\n                 * on encrypted fields.\n                 */\n                ensureNotFalsy(params.schema.encrypted).forEach(key => {\n                    (schemaWithoutEncrypted as any).properties[key].type = 'string';\n                    delete (schemaWithoutEncrypted as any).properties[key].properties;\n                });\n\n                const instance = await args.storage.createStorageInstance(\n                    Object.assign(\n                        {},\n                        params,\n                        {\n                            schema: schemaWithoutEncrypted\n                        }\n                    )\n                );\n\n                function modifyToStorage(docData: RxDocumentWriteData<RxDocType>) {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = getProperty(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n\n                            const stringValue = JSON.stringify(value);\n                            const encrypted = encryptString(stringValue, password);\n                            setProperty(docData, path, encrypted);\n                        });\n\n                    // handle attachments\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const newAttachments: typeof docData._attachments = {};\n                        Object.entries(docData._attachments).forEach(([id, attachment]) => {\n                            const useAttachment: RxAttachmentWriteData = flatClone(attachment) as any;\n                            if (useAttachment.data) {\n                                const dataString = useAttachment.data;\n                                useAttachment.data = b64EncodeUnicode(encryptString(dataString, password));\n                            }\n                            newAttachments[id] = useAttachment;\n                        });\n                        docData._attachments = newAttachments;\n                    }\n                    return docData;\n                }\n                function modifyFromStorage(docData: RxDocumentData<any>): Promise<RxDocumentData<RxDocType>> {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = getProperty(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n                            const decrypted = decryptString(value, password);\n                            const decryptedParsed = JSON.parse(decrypted);\n                            setProperty(docData, path, decryptedParsed);\n                        });\n                    return docData;\n                }\n\n                function modifyAttachmentFromStorage(attachmentData: string): string {\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const decrypted = decryptString(b64DecodeUnicode(attachmentData), password);\n                        return decrypted;\n                    } else {\n                        return attachmentData;\n                    }\n                }\n\n                return wrapRxStorageInstance(\n                    params.schema,\n                    instance,\n                    modifyToStorage,\n                    modifyFromStorage,\n                    modifyAttachmentFromStorage\n                );\n            }\n        }\n    );\n}\n\n\n\n\n\nfunction cloneWithoutAttachments<T>(data: RxDocumentWriteData<T>): RxDocumentData<T> {\n    const attachments = data._attachments;\n    data = flatClone(data);\n    delete (data as any)._attachments;\n    data = clone(data);\n    data._attachments = attachments;\n    return data as any;\n}\n\nfunction validatePassword(password: string) {\n    if (typeof password !== 'string') {\n        throw newRxTypeError('EN1', {\n            password\n        });\n    }\n    if (password.length < MINIMUM_PASSWORD_LENGTH) {\n        throw newRxError('EN2', {\n            minPassLength: MINIMUM_PASSWORD_LENGTH,\n            password\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]}