{"version":3,"file":"rx-local-document.js","names":["_rxjs","require","_overwritable","_rxChangeEvent","_rxDocument","_rxError","_rxStorageHelper","_index","_localDocumentsHelper","_rxDatabase","RxDocumentParent","createRxDocumentConstructor","RxLocalDocumentClass","_RxDocumentParent","id","jsonData","parent","_this2","call","_inheritsLoose2","default","RxLocalDocumentPrototype","isLocal","allAttachments$","newRxError","document","primaryPath","primary","$","_this","state","getFromMapOrThrow","LOCAL_DOC_STATE_BY_PARENT_RESOLVED","eventBulks$","pipe","filter","bulk","map","events","find","ev","documentId","event","changeEvent","getDocumentDataOfRxChangeEvent","ensureNotFalsy","startWith","docCache","getLatestDocumentData","distinctUntilChanged","prev","curr","_rev","docData","getCachedRxDocument","shareReplay","RXJS_SHARE_REPLAY_DEFAULTS","$$","db","getRxDatabaseFromLocalDocument","reactivity","getReactivityFactory","fromObservable","getLatest","_data","deleted$$","deleted$","deleted","latestDocData","get","objPath","undefined","newRxTypeError","valueObj","getProperty","overwritable","deepFreezeWhenDevMode","get$","isDevMode","includes","localDocument","data","get$$","incrementalModify","mutationFunction","getLocalDocStateByParent","incrementalWriteQueue","addWrite","then","result","incrementalPatch","patch","Object","entries","forEach","k","v","_saveData","newData","oldData","writeRows","previous","storageInstance","bulkWrite","res","error","success","getWrittenDocumentsFromBulkWriteResponse","collection","schema","flatClone","remove","writeData","_deleted","writeSingle","writeResult","INIT_DONE","_init","docBaseProto","basePrototype","props","getOwnPropertyNames","key","exists","getOwnPropertyDescriptor","desc","defineProperty","getThrowingFun","functionName","createRxLocalDocument","newDoc","setPrototypeOf","prototype","doc","isRxDatabase","database"],"sources":["../../../../src/plugins/local-documents/rx-local-document.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport {\n    distinctUntilChanged,\n    filter,\n    map,\n    shareReplay,\n    startWith\n} from 'rxjs';\nimport { overwritable } from '../../overwritable.ts';\nimport { getDocumentDataOfRxChangeEvent } from '../../rx-change-event.ts';\nimport {\n    basePrototype,\n    createRxDocumentConstructor\n} from '../../rx-document.ts';\nimport {\n    newRxError,\n    newRxTypeError\n} from '../../rx-error.ts';\nimport { getWrittenDocumentsFromBulkWriteResponse, writeSingle } from '../../rx-storage-helper.ts';\nimport type {\n    LocalDocumentModifyFunction,\n    RxCollection,\n    RxDatabase,\n    RxDocument,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxLocalDocument,\n    RxLocalDocumentData\n} from '../../types/index.d.ts';\nimport {\n    ensureNotFalsy,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    getFromMapOrThrow,\n    getProperty,\n    RXJS_SHARE_REPLAY_DEFAULTS\n} from '../../plugins/utils/index.ts';\nimport { getLocalDocStateByParent, LOCAL_DOC_STATE_BY_PARENT_RESOLVED } from './local-documents-helper.ts';\nimport { isRxDatabase } from '../../rx-database.ts';\n\nconst RxDocumentParent = createRxDocumentConstructor() as any;\n\nclass RxLocalDocumentClass<DocData = any> extends RxDocumentParent {\n    constructor(\n        public readonly id: string,\n        jsonData: DocData,\n        public readonly parent: RxCollection | RxDatabase\n    ) {\n        super(null, jsonData);\n    }\n}\n\n\n\nconst RxLocalDocumentPrototype: any = {\n    get isLocal() {\n        return true;\n    },\n\n    //\n    // overwrites\n    //\n    get allAttachments$() {\n        // this is overwritten here because we cannot re-set getters on the prototype\n        throw newRxError('LD1', {\n            document: this\n        });\n    },\n    get primaryPath() {\n        return 'id';\n    },\n    get primary() {\n        return this.id;\n    },\n    get $(): Observable<RxLocalDocument<any, any>> {\n        const _this: RxLocalDocumentClass = this as any;\n        const state = getFromMapOrThrow(LOCAL_DOC_STATE_BY_PARENT_RESOLVED, this.parent);\n\n        const id = this.primary;\n        return _this.parent.eventBulks$.pipe(\n            filter(bulk => !!bulk.isLocal),\n            map(bulk => bulk.events.find(ev => ev.documentId === id)),\n            filter(event => !!event),\n            map(changeEvent => getDocumentDataOfRxChangeEvent(ensureNotFalsy(changeEvent))),\n            startWith(state.docCache.getLatestDocumentData(this.primary)),\n            distinctUntilChanged((prev, curr) => prev._rev === curr._rev),\n            map(docData => state.docCache.getCachedRxDocument(docData)),\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS)\n        ) as Observable<any>;;\n    },\n    get $$(): any {\n        const _this: RxLocalDocumentClass = this as any;\n        const db = getRxDatabaseFromLocalDocument(_this);\n        const reactivity = db.getReactivityFactory();\n        return reactivity.fromObservable(\n            _this.$,\n            _this.getLatest()._data,\n            db\n        );\n    },\n    get deleted$$() {\n        const _this: RxLocalDocumentClass = this as any;\n        const db = getRxDatabaseFromLocalDocument(_this);\n        const reactivity = db.getReactivityFactory();\n        return reactivity.fromObservable(\n            _this.deleted$,\n            _this.getLatest().deleted,\n            db\n        );\n    },\n    getLatest(this: RxLocalDocument<any>): RxLocalDocument<any> {\n        const state = getFromMapOrThrow(LOCAL_DOC_STATE_BY_PARENT_RESOLVED, this.parent);\n        const latestDocData = state.docCache.getLatestDocumentData(this.primary);\n        return state.docCache.getCachedRxDocument(latestDocData) as any;\n    },\n    get(this: RxDocument, objPath: string) {\n        objPath = 'data.' + objPath;\n\n        if (!this._data) {\n            return undefined;\n        }\n        if (typeof objPath !== 'string') {\n            throw newRxTypeError('LD2', {\n                objPath\n            });\n        }\n\n        let valueObj = getProperty(this._data, objPath);\n        valueObj = overwritable.deepFreezeWhenDevMode(valueObj);\n        return valueObj;\n    },\n    get$(this: RxDocument, objPath: string) {\n        objPath = 'data.' + objPath;\n\n        if (overwritable.isDevMode()) {\n            if (objPath.includes('.item.')) {\n                throw newRxError('LD3', {\n                    objPath\n                });\n            }\n            if (objPath === this.primaryPath) {\n                throw newRxError('LD4');\n            }\n        }\n        return this.$\n            .pipe(\n                map(localDocument => localDocument._data),\n                map(data => getProperty(data, objPath)),\n                distinctUntilChanged()\n            );\n    },\n    get$$(this: RxDocument, objPath: string) {\n        const db = getRxDatabaseFromLocalDocument(this as any);\n        const reactivity = db.getReactivityFactory();\n        return reactivity.fromObservable(\n            this.get$(objPath),\n            this.getLatest().get(objPath),\n            db\n        );\n    },\n    async incrementalModify<DocData>(\n        this: RxLocalDocument<any, DocData>,\n        mutationFunction: LocalDocumentModifyFunction<any>\n    ) {\n        const state = await getLocalDocStateByParent(this.parent);\n\n        return state.incrementalWriteQueue.addWrite(\n            this._data as any,\n            async (docData) => {\n                docData.data = await mutationFunction(docData.data, this);\n                return docData;\n            }\n        ).then(result => state.docCache.getCachedRxDocument(result as any));\n    },\n    incrementalPatch(patch: Partial<any>) {\n        return this.incrementalModify((docData: any) => {\n            Object\n                .entries(patch)\n                .forEach(([k, v]) => {\n                    docData[k] = v;\n                });\n            return docData;\n        });\n    },\n    async _saveData(this: RxLocalDocument<any>, newData: RxDocumentData<RxLocalDocumentData>) {\n        const state = await getLocalDocStateByParent(this.parent);\n        const oldData: RxDocumentData<RxLocalDocumentData> = this._data;\n        newData.id = (this as any).id;\n        const writeRows = [{\n            previous: oldData,\n            document: newData\n        }];\n        return state.storageInstance.bulkWrite(writeRows, 'local-document-save-data')\n            .then((res) => {\n                if (res.error[0]) {\n                    throw res.error[0];\n                }\n                const success = getWrittenDocumentsFromBulkWriteResponse(this.collection.schema.primaryPath, writeRows, res)[0];\n                newData = flatClone(newData);\n                newData._rev = success._rev;\n            });\n    },\n\n    async remove(this: RxLocalDocument<any>): Promise<RxLocalDocument<any>> {\n        const state = await getLocalDocStateByParent(this.parent);\n        const writeData = flatClone(this._data);\n        writeData._deleted = true;\n        return writeSingle(state.storageInstance, {\n            previous: this._data,\n            document: writeData\n        }, 'local-document-remove')\n            .then((writeResult) => state.docCache.getCachedRxDocument(writeResult) as any);\n    }\n};\n\n\n\nlet INIT_DONE = false;\nconst _init = () => {\n    if (INIT_DONE) return;\n    else INIT_DONE = true;\n\n    // add functions of RxDocument\n    const docBaseProto = basePrototype;\n    const props = Object.getOwnPropertyNames(docBaseProto);\n    props.forEach(key => {\n        const exists = Object.getOwnPropertyDescriptor(RxLocalDocumentPrototype, key);\n        if (exists) return;\n        const desc: any = Object.getOwnPropertyDescriptor(docBaseProto, key);\n        Object.defineProperty(RxLocalDocumentPrototype, key, desc);\n    });\n\n\n    /**\n     * Overwrite things that do not work on local documents\n     * with a throwing function.\n     */\n    const getThrowingFun = (k: string) => () => {\n        throw newRxError('LD6', {\n            functionName: k\n        });\n    };\n    [\n        'populate',\n        'update',\n        'putAttachment',\n        'getAttachment',\n        'allAttachments'\n    ].forEach((k: string) => RxLocalDocumentPrototype[k] = getThrowingFun(k));\n};\n\n\n\nexport function createRxLocalDocument<DocData>(\n    data: RxDocumentData<RxLocalDocumentData<DocData>>,\n    parent: any\n): RxLocalDocument<DocData> {\n    _init();\n    const newDoc = new RxLocalDocumentClass(data.id, data, parent);\n    Object.setPrototypeOf(newDoc, RxLocalDocumentPrototype);\n    newDoc.prototype = RxLocalDocumentPrototype;\n    return newDoc as any;\n}\n\n\nexport function getRxDatabaseFromLocalDocument(doc: RxLocalDocument<any> | RxLocalDocumentClass) {\n    const parent = doc.parent;\n    if (isRxDatabase(parent)) {\n        return parent;\n    } else {\n        return (parent as RxCollection).database;\n    }\n}\n"],"mappings":"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","ignoreList":[]}