{"version":3,"file":"rx-query.js","names":["_rxjs","require","_operators","_index","_rxError","_hooks","_eventReduce","_queryCache","_rxQueryHelper","_rxQuerySingleResult","_queryCount","newQueryID","RxQueryBase","exports","op","mangoQuery","collection","other","id","_execOverDatabaseCount","_creationTime","now","_lastEnsureEqual","uncached","refCount$","BehaviorSubject","_result","_latestChangeEvent","_ensureEqualQueue","PROMISE_RESOLVE_FALSE","_getDefaultQuery","isFindOneByIdQuery","schema","primaryPath","_proto","prototype","_setResultData","newResultData","newRxError","database","name","RxQuerySingleResult","Map","Array","from","values","newQueryResult","length","_execOverDatabase","preparedQuery","getPreparedQuery","result","storageInstance","count","mode","allowSlowCount","queryObj","ids","ensureNotFalsy","selector","$in","ret","mustBeQueried","forEach","docData","_docCache","getLatestDocumentDataIfExists","_deleted","doc","getCachedRxDocument","set","push","docs","findDocumentsById","primary","docsPromise","queryCollection","then","exec","throwIfMissing","query","_ensureEqual","useResult","getValue","toString","stringObj","sortObject","normalizeMangoQuery","jsonSchema","value","JSON","stringify","hookInput","rxQuery","$eq","index","unshift","runPluginHooks","prepareQuery","doesDocumentDataMatch","queryMatcher","remove","isArray","bulkRemove","error","rxStorageWriteErrorToRxError","success","incrementalRemove","runQueryUpdateFunction","asRxQuery","update","_updateObj","pluginMissing","patch","incrementalPatch","modify","mutationFunction","incrementalModify","where","_queryObj","sort","_params","skip","_amount","limit","_createClass2","default","key","get","_$","results$","eventBulks$","pipe","filter","bulk","isLocal","startWith","mergeMap","map","shareReplay","RXJS_SHARE_REPLAY_DEFAULTS","distinctUntilChanged","prev","curr","time","merge","reactivity","getReactivityFactory","fromObservable","$","undefined","normalizedQuery","overwriteGetterForCaching","getQueryMatcher","tunnelQueryCache","getByQuery","createRxQuery","triggerCacheReplacement","_isResultsInSync","currentLatestEventNumber","_changeEventBuffer","getCounter","awaitBeforeReads","size","Promise","all","fn","closed","__ensureEqual","mustReExec","missedChangeEvents","getFrom","runChangeEvents","reduceByLastOfDoc","previousCount","newCount","cE","didMatchBefore","previousDocumentData","doesMatchNow","documentData","eventReduceResult","calculateNewResults","runFullQueryAgain","changed","newResults","areRxDocumentArraysEqual","docsData","resolve","docIds","docId","docsFromStorage","appendToArray","fromStorageList","queryResult","documents","Object","keys","find","r","isRxQuery","obj"],"sources":["../../src/rx-query.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    Observable,\n    merge\n} from 'rxjs';\nimport {\n    mergeMap,\n    filter,\n    map,\n    startWith,\n    distinctUntilChanged,\n    shareReplay\n} from 'rxjs/operators';\nimport {\n    sortObject,\n    pluginMissing,\n    overwriteGetterForCaching,\n    now,\n    PROMISE_RESOLVE_FALSE,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    ensureNotFalsy,\n    areRxDocumentArraysEqual,\n    appendToArray\n} from './plugins/utils/index.ts';\nimport {\n    newRxError,\n    rxStorageWriteErrorToRxError\n} from './rx-error.ts';\nimport {\n    runPluginHooks\n} from './hooks.ts';\nimport type {\n    RxCollection,\n    RxDocument,\n    RxQueryOP,\n    RxQuery,\n    MangoQuery,\n    MangoQuerySortPart,\n    MangoQuerySelector,\n    PreparedQuery,\n    RxDocumentWriteData,\n    RxDocumentData,\n    QueryMatcher,\n    ModifyFunction,\n    RxStorageChangeEvent\n} from './types/index.d.ts';\nimport { calculateNewResults } from './event-reduce.ts';\nimport { triggerCacheReplacement } from './query-cache.ts';\nimport {\n    getQueryMatcher,\n    normalizeMangoQuery,\n    prepareQuery,\n    runQueryUpdateFunction\n\n} from './rx-query-helper.ts';\nimport { RxQuerySingleResult } from './rx-query-single-result.ts';\n\nlet _queryCount = 0;\nconst newQueryID = function (): number {\n    return ++_queryCount;\n};\n\nexport class RxQueryBase<\n    RxDocType,\n    RxQueryResult,\n    OrmMethods = {},\n    Reactivity = unknown,\n> {\n\n    public id: number = newQueryID();\n\n    /**\n     * Some stats then are used for debugging and cache replacement policies\n     */\n    public _execOverDatabaseCount: number = 0;\n    public _creationTime = now();\n\n    // used in the query-cache to determine if the RxQuery can be cleaned up.\n    public _lastEnsureEqual = 0;\n\n    public uncached = false;\n\n    // used to count the subscribers to the query\n    public refCount$ = new BehaviorSubject(null);\n\n    public isFindOneByIdQuery: false | string | string[];\n\n\n    /**\n     * Contains the current result state\n     * or null if query has not run yet.\n     */\n    public _result: RxQuerySingleResult<RxDocType> | null = null;\n\n\n    constructor(\n        public op: RxQueryOP,\n        public mangoQuery: Readonly<MangoQuery<RxDocType>>,\n        public collection: RxCollection<RxDocType>,\n        // used by some plugins\n        public other: any = {}\n    ) {\n        if (!mangoQuery) {\n            this.mangoQuery = _getDefaultQuery();\n        }\n\n        this.isFindOneByIdQuery = isFindOneByIdQuery(\n            this.collection.schema.primaryPath as string,\n            mangoQuery\n        );\n    }\n    get $(): Observable<RxQueryResult> {\n        if (!this._$) {\n            const results$ = this.collection.eventBulks$.pipe(\n                /**\n                 * Performance shortcut.\n                 * Changes to local documents are not relevant for the query.\n                 */\n                filter(bulk => !bulk.isLocal),\n                /**\n                 * Start once to ensure the querying also starts\n                 * when there where no changes.\n                 */\n                startWith(null),\n                // ensure query results are up to date.\n                mergeMap(() => _ensureEqual(this as any)),\n                // use the current result set, written by _ensureEqual().\n                map(() => this._result),\n                // do not run stuff above for each new subscriber, only once.\n                shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n                // do not proceed if result set has not changed.\n                distinctUntilChanged((prev, curr) => {\n                    if (prev && prev.time === ensureNotFalsy(curr).time) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }),\n                filter(result => !!result),\n                /**\n                 * Map the result set to a single RxDocument or an array,\n                 * depending on query type\n                 */\n                map((result) => {\n                    return ensureNotFalsy(result).getValue();\n                })\n            );\n\n            this._$ = merge<any>(\n                results$,\n                /**\n                 * Also add the refCount$ to the query observable\n                 * to allow us to count the amount of subscribers.\n                 */\n                this.refCount$.pipe(\n                    filter(() => false)\n                )\n            );\n        }\n        return this._$ as any;\n    }\n\n    get $$(): Reactivity {\n        const reactivity = this.collection.database.getReactivityFactory();\n        return reactivity.fromObservable(\n            this.$,\n            undefined,\n            this.collection.database\n        ) as any;\n    }\n\n    // stores the changeEvent-number of the last handled change-event\n    public _latestChangeEvent: -1 | number = -1;\n\n    /**\n     * ensures that the exec-runs\n     * are not run in parallel\n     */\n    public _ensureEqualQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n\n    /**\n     * Returns an observable that emits the results\n     * This should behave like an rxjs-BehaviorSubject which means:\n     * - Emit the current result-set on subscribe\n     * - Emit the new result-set when an RxChangeEvent comes in\n     * - Do not emit anything before the first result-set was created (no null)\n     */\n    public _$?: Observable<RxQueryResult>;\n\n    /**\n     * set the new result-data as result-docs of the query\n     * @param newResultData json-docs that were received from the storage\n     */\n    _setResultData(newResultData: RxDocumentData<RxDocType>[] | number | Map<string, RxDocumentData<RxDocType>>): void {\n        if (typeof newResultData === 'undefined') {\n            throw newRxError('QU18', {\n                database: this.collection.database.name,\n                collection: this.collection.name\n            });\n        }\n        if (typeof newResultData === 'number') {\n            this._result = new RxQuerySingleResult<RxDocType>(\n                this as any,\n                [],\n                newResultData\n            );\n            return;\n        } else if (newResultData instanceof Map) {\n            newResultData = Array.from((newResultData as Map<string, RxDocumentData<RxDocType>>).values());\n        }\n\n        const newQueryResult = new RxQuerySingleResult<RxDocType>(\n            this as any,\n            newResultData,\n            newResultData.length\n        );\n        this._result = newQueryResult;\n    }\n\n    /**\n     * executes the query on the database\n     * @return results-array with document-data\n     */\n    async _execOverDatabase(): Promise<RxDocumentData<RxDocType>[] | number> {\n        this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n        if (this.op === 'count') {\n            const preparedQuery = this.getPreparedQuery();\n            const result = await this.collection.storageInstance.count(preparedQuery);\n            if (result.mode === 'slow' && !this.collection.database.allowSlowCount) {\n                throw newRxError('QU14', {\n                    collection: this.collection,\n                    queryObj: this.mangoQuery\n                });\n            } else {\n                return result.count;\n            }\n        }\n\n        if (this.op === 'findByIds') {\n            const ids: string[] = ensureNotFalsy(this.mangoQuery.selector as any)[this.collection.schema.primaryPath].$in;\n            const ret = new Map<string, RxDocument<RxDocType>>();\n            const mustBeQueried: string[] = [];\n            // first try to fill from docCache\n            ids.forEach(id => {\n                const docData = this.collection._docCache.getLatestDocumentDataIfExists(id);\n                if (docData) {\n                    if (!docData._deleted) {\n                        const doc = this.collection._docCache.getCachedRxDocument(docData);\n                        ret.set(id, doc);\n                    }\n                } else {\n                    mustBeQueried.push(id);\n                }\n            });\n            // everything which was not in docCache must be fetched from the storage\n            if (mustBeQueried.length > 0) {\n                const docs = await this.collection.storageInstance.findDocumentsById(mustBeQueried, false);\n                docs.forEach(docData => {\n                    const doc = this.collection._docCache.getCachedRxDocument(docData);\n                    ret.set(doc.primary, doc);\n                });\n            }\n            return ret as any;\n        }\n\n\n        const docsPromise = queryCollection<RxDocType>(this as any);\n        return docsPromise.then(docs => {\n            return docs;\n        });\n    }\n\n    /**\n     * Execute the query\n     * To have an easier implementations,\n     * just subscribe and use the first result\n     */\n    public exec(throwIfMissing: true): Promise<RxDocument<RxDocType, OrmMethods, Reactivity>>;\n    public exec(): Promise<RxQueryResult>;\n    public async exec(throwIfMissing?: boolean): Promise<any> {\n        if (throwIfMissing && this.op !== 'findOne') {\n            throw newRxError('QU9', {\n                collection: this.collection.name,\n                query: this.mangoQuery,\n                op: this.op\n            });\n        }\n\n        /**\n         * run _ensureEqual() here,\n         * this will make sure that errors in the query which throw inside of the RxStorage,\n         * will be thrown at this execution context and not in the background.\n         */\n        await _ensureEqual(this as any);\n        const useResult = ensureNotFalsy(this._result);\n        return useResult.getValue(throwIfMissing);\n    }\n\n\n\n    /**\n     * cached call to get the queryMatcher\n     * @overwrites itself with the actual value\n     */\n    get queryMatcher(): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const schema = this.collection.schema.jsonSchema;\n        const normalizedQuery = normalizeMangoQuery(\n            this.collection.schema.jsonSchema,\n            this.mangoQuery\n        );\n        return overwriteGetterForCaching(\n            this,\n            'queryMatcher',\n            getQueryMatcher(\n                schema,\n                normalizedQuery\n            ) as any\n        );\n    }\n\n    /**\n     * returns a string that is used for equal-comparisons\n     * @overwrites itself with the actual value\n     */\n    toString(): string {\n        const stringObj = sortObject({\n            op: this.op,\n            query: normalizeMangoQuery<RxDocType>(\n                this.collection.schema.jsonSchema,\n                this.mangoQuery\n            ),\n            other: this.other\n        }, true);\n        const value = JSON.stringify(stringObj);\n        this.toString = () => value;\n        return value;\n    }\n\n    /**\n     * returns the prepared query\n     * which can be send to the storage instance to query for documents.\n     * @overwrites itself with the actual value.\n     */\n    getPreparedQuery(): PreparedQuery<RxDocType> {\n        const hookInput = {\n            rxQuery: this,\n            // can be mutated by the hooks so we have to deep clone first.\n            mangoQuery: normalizeMangoQuery<RxDocType>(\n                this.collection.schema.jsonSchema,\n                this.mangoQuery\n            )\n        };\n        (hookInput.mangoQuery.selector as any)._deleted = { $eq: false };\n        if (hookInput.mangoQuery.index) {\n            hookInput.mangoQuery.index.unshift('_deleted');\n        }\n        runPluginHooks('prePrepareQuery', hookInput);\n\n        const value = prepareQuery(\n            this.collection.schema.jsonSchema,\n            hookInput.mangoQuery as any\n        );\n\n        this.getPreparedQuery = () => value;\n        return value;\n    }\n\n    /**\n     * returns true if the document matches the query,\n     * does not use the 'skip' and 'limit'\n     */\n    doesDocumentDataMatch(docData: RxDocType | any): boolean {\n        // if doc is deleted, it cannot match\n        if (docData._deleted) {\n            return false;\n        }\n\n        return this.queryMatcher(docData);\n    }\n\n    /**\n     * deletes all found documents\n     * @return promise with deleted documents\n     */\n    async remove(): Promise<RxQueryResult> {\n        const docs = await this.exec();\n        if (Array.isArray(docs)) {\n            const result = await this.collection.bulkRemove(docs);\n            if (result.error.length > 0) {\n                throw rxStorageWriteErrorToRxError(result.error[0]);\n            } else {\n                return result.success as any;\n            }\n        } else {\n            return (docs as any).remove();\n        }\n    }\n    incrementalRemove(): Promise<RxQueryResult> {\n        return runQueryUpdateFunction(\n            this.asRxQuery,\n            (doc) => doc.incrementalRemove(),\n        );\n    }\n\n\n    /**\n     * helper function to transform RxQueryBase to RxQuery type\n     */\n    get asRxQuery(): RxQuery<RxDocType, RxQueryResult> {\n        return this as any;\n    }\n\n    /**\n     * updates all found documents\n     * @overwritten by plugin (optional)\n     */\n    update(_updateObj: any): Promise<RxQueryResult> {\n        throw pluginMissing('update');\n    }\n\n    patch(patch: Partial<RxDocType>): Promise<RxQueryResult> {\n        return runQueryUpdateFunction(\n            this.asRxQuery,\n            (doc) => doc.patch(patch),\n        );\n    }\n    incrementalPatch(patch: Partial<RxDocType>): Promise<RxQueryResult> {\n        return runQueryUpdateFunction(\n            this.asRxQuery,\n            (doc) => doc.incrementalPatch(patch),\n        );\n    }\n    modify(mutationFunction: ModifyFunction<RxDocType>): Promise<RxQueryResult> {\n        return runQueryUpdateFunction(\n            this.asRxQuery,\n            (doc) => doc.modify(mutationFunction),\n        );\n    }\n    incrementalModify(mutationFunction: ModifyFunction<RxDocType>): Promise<RxQueryResult> {\n        return runQueryUpdateFunction(\n            this.asRxQuery,\n            (doc) => doc.incrementalModify(mutationFunction),\n        );\n    }\n\n\n    // we only set some methods of query-builder here\n    // because the others depend on these ones\n    where(_queryObj: MangoQuerySelector<RxDocType> | keyof RxDocType | string): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    sort(_params: string | MangoQuerySortPart<RxDocType>): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    skip(_amount: number | null): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    limit(_amount: number | null): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n}\n\n\nexport function _getDefaultQuery<RxDocType>(): MangoQuery<RxDocType> {\n    return {\n        selector: {}\n    };\n}\n\n/**\n * run this query through the QueryCache\n */\nexport function tunnelQueryCache<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQueryBase<RxDocumentType, RxQueryResult>\n): RxQuery<RxDocumentType, RxQueryResult> {\n    return rxQuery.collection._queryCache.getByQuery(rxQuery as any);\n}\n\nexport function createRxQuery<RxDocType>(\n    op: RxQueryOP,\n    queryObj: MangoQuery<RxDocType>,\n    collection: RxCollection<RxDocType>,\n    other?: any\n) {\n    runPluginHooks('preCreateRxQuery', {\n        op,\n        queryObj,\n        collection,\n        other\n    });\n\n    let ret = new RxQueryBase<RxDocType, any>(op, queryObj, collection, other);\n\n    // ensure when created with same params, only one is created\n    ret = tunnelQueryCache(ret);\n    triggerCacheReplacement(collection);\n\n    return ret;\n}\n\n/**\n * Check if the current results-state is in sync with the database\n * which means that no write event happened since the last run.\n * @return false if not which means it should re-execute\n */\nfunction _isResultsInSync(rxQuery: RxQueryBase<any, any>): boolean {\n    const currentLatestEventNumber = rxQuery.asRxQuery.collection._changeEventBuffer.getCounter();\n    if (rxQuery._latestChangeEvent >= currentLatestEventNumber) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\nasync function _ensureEqual(rxQuery: RxQueryBase<any, any>): Promise<boolean> {\n    if (rxQuery.collection.awaitBeforeReads.size > 0) {\n        await Promise.all(Array.from(rxQuery.collection.awaitBeforeReads).map(fn => fn()));\n    }\n\n    // Optimisation shortcut\n    if (\n        rxQuery.collection.database.closed ||\n        _isResultsInSync(rxQuery)\n    ) {\n        return false;\n    }\n\n    rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue\n        .then(() => __ensureEqual(rxQuery));\n    return rxQuery._ensureEqualQueue;\n}\n\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\nfunction __ensureEqual<RxDocType>(rxQuery: RxQueryBase<RxDocType, any>): Promise<boolean> {\n    rxQuery._lastEnsureEqual = now();\n\n    /**\n     * Optimisation shortcuts\n     */\n    if (\n        // db is closed\n        rxQuery.collection.database.closed ||\n        // nothing happened since last run\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let ret = false;\n    let mustReExec = false; // if this becomes true, a whole execution over the database is made\n    if (rxQuery._latestChangeEvent === -1) {\n        // have not executed yet -> must run\n        mustReExec = true;\n    }\n\n    /**\n     * try to use EventReduce to calculate the new results\n     */\n    if (!mustReExec) {\n        const missedChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n        if (missedChangeEvents === null) {\n            // changeEventBuffer is of bounds -> we must re-execute over the database\n            mustReExec = true;\n        } else {\n            rxQuery._latestChangeEvent = rxQuery.asRxQuery.collection._changeEventBuffer.getCounter();\n\n            const runChangeEvents: RxStorageChangeEvent<RxDocType>[] = rxQuery.asRxQuery.collection\n                ._changeEventBuffer\n                .reduceByLastOfDoc(missedChangeEvents);\n\n            if (rxQuery.op === 'count') {\n                // 'count' query\n                const previousCount = ensureNotFalsy(rxQuery._result).count;\n                let newCount = previousCount;\n                runChangeEvents.forEach(cE => {\n                    const didMatchBefore = cE.previousDocumentData && rxQuery.doesDocumentDataMatch(cE.previousDocumentData);\n                    const doesMatchNow = rxQuery.doesDocumentDataMatch(cE.documentData);\n\n                    if (!didMatchBefore && doesMatchNow) {\n                        newCount++;\n                    }\n                    if (didMatchBefore && !doesMatchNow) {\n                        newCount--;\n                    }\n                });\n                if (newCount !== previousCount) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newCount as any);\n                }\n            } else {\n                // 'find' or 'findOne' query\n                const eventReduceResult = calculateNewResults(\n                    rxQuery as any,\n                    runChangeEvents\n                );\n                if (eventReduceResult.runFullQueryAgain) {\n                    // could not calculate the new results, execute must be done\n                    mustReExec = true;\n                } else if (eventReduceResult.changed) {\n                    // we got the new results, we do not have to re-execute, mustReExec stays false\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(eventReduceResult.newResults as any);\n                }\n            }\n        }\n    }\n\n    // oh no we have to re-execute the whole query over the database\n    if (mustReExec) {\n        return rxQuery._execOverDatabase()\n            .then(newResultData => {\n\n                /**\n                 * The RxStorage is defined to always first emit events and then return\n                 * on bulkWrite() calls. So here we have to use the counter AFTER the execOverDatabase()\n                 * has been run, not the one from before.\n                 */\n                rxQuery._latestChangeEvent = rxQuery.collection._changeEventBuffer.getCounter();\n\n                // A count query needs a different has-changed check.\n                if (typeof newResultData === 'number') {\n                    if (\n                        !rxQuery._result ||\n                        newResultData !== rxQuery._result.count\n                    ) {\n                        ret = true;\n                        rxQuery._setResultData(newResultData as any);\n                    }\n                    return ret;\n                }\n                if (\n                    !rxQuery._result ||\n                    !areRxDocumentArraysEqual(\n                        rxQuery.collection.schema.primaryPath,\n                        newResultData,\n                        rxQuery._result.docsData\n                    )\n                ) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newResultData as any);\n                }\n                return ret;\n            });\n    }\n    return Promise.resolve(ret); // true if results have changed\n}\n\n\n/**\n * Runs the query over the storage instance\n * of the collection.\n * Does some optimizations to ensure findById is used\n * when specific queries are used.\n */\nexport async function queryCollection<RxDocType>(\n    rxQuery: RxQuery<RxDocType> | RxQueryBase<RxDocType, any>\n): Promise<RxDocumentData<RxDocType>[]> {\n    let docs: RxDocumentData<RxDocType>[] = [];\n    const collection = rxQuery.collection;\n\n    /**\n     * Optimizations shortcut.\n     * If query is find-one-document-by-id,\n     * then we do not have to use the slow query() method\n     * but instead can use findDocumentsById()\n     */\n    if (rxQuery.isFindOneByIdQuery) {\n        if (Array.isArray(rxQuery.isFindOneByIdQuery)) {\n            let docIds = rxQuery.isFindOneByIdQuery;\n            docIds = docIds.filter(docId => {\n                // first try to fill from docCache\n                const docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n                if (docData) {\n                    if (!docData._deleted) {\n                        docs.push(docData);\n                    }\n                    return false;\n                } else {\n                    return true;\n                }\n            });\n            // otherwise get from storage\n            if (docIds.length > 0) {\n                const docsFromStorage = await collection.storageInstance.findDocumentsById(docIds, false);\n                appendToArray(docs, docsFromStorage);\n            }\n        } else {\n            const docId = rxQuery.isFindOneByIdQuery;\n\n            // first try to fill from docCache\n            let docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n            if (!docData) {\n                // otherwise get from storage\n                const fromStorageList = await collection.storageInstance.findDocumentsById([docId], false);\n                if (fromStorageList[0]) {\n                    docData = fromStorageList[0];\n                }\n            }\n            if (docData && !docData._deleted) {\n                docs.push(docData);\n            }\n        }\n    } else {\n        const preparedQuery = rxQuery.getPreparedQuery();\n        const queryResult = await collection.storageInstance.query(preparedQuery);\n        docs = queryResult.documents;\n    }\n    return docs;\n\n}\n\n/**\n * Returns true if the given query\n * selects exactly one document by its id.\n * Used to optimize performance because these kind of\n * queries do not have to run over an index and can use get-by-id instead.\n * Returns false if no query of that kind.\n * Returns the document id otherwise.\n */\nexport function isFindOneByIdQuery(\n    primaryPath: string,\n    query: MangoQuery<any>\n): false | string | string[] {\n    // must have exactly one operator which must be $eq || $in\n    if (\n        !query.skip &&\n        query.selector &&\n        Object.keys(query.selector).length === 1 &&\n        query.selector[primaryPath]\n    ) {\n        const value: any = query.selector[primaryPath];\n        if (typeof value === 'string') {\n            return value;\n        } else if (\n            Object.keys(value).length === 1 &&\n            typeof value.$eq === 'string'\n        ) {\n            return value.$eq;\n        }\n\n        // same with $in string arrays\n        if (\n            Object.keys(value).length === 1 &&\n            Array.isArray(value.$eq) &&\n            // must only contain strings\n            !(value.$eq as any[]).find(r => typeof r !== 'string')\n        ) {\n            return value.$eq;\n        }\n    }\n    return false;\n}\n\n\n\nexport function isRxQuery(obj: any): boolean {\n    return obj instanceof RxQueryBase;\n}\n"],"mappings":"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","ignoreList":[]}