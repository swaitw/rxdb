{"version":3,"file":"conflict-handling.d.js","names":[],"sources":["../../../src/types/conflict-handling.d.ts"],"sourcesContent":["import type { WithDeleted } from './rx-storage.d.ts';\n\n/**\n * Notice that the conflict handler input/output\n * does not work on RxDocumentData<RxDocType>, but only on WithDeleted<RxDocType>.\n * This is because the _meta attributes are meant for the local storing of document data, they not replicated\n * and therefore cannot be used to resolve conflicts.\n */\nexport type RxConflictHandlerInput<RxDocType> = {\n    assumedMasterState?: WithDeleted<RxDocType>;\n    realMasterState: WithDeleted<RxDocType>;\n    newDocumentState: WithDeleted<RxDocType>;\n};\n\n/**\n * The conflict handler either returns:\n * - The resolved new document state\n * - A flag to identify the given 'realMasterState' and 'newDocumentState'\n *   as being exactly equal, so no conflict has to be resolved.\n */\nexport type RxConflictHandlerOutput<RxDocType> = {\n    isEqual: false;\n    documentData: WithDeleted<RxDocType>;\n} | {\n    isEqual: true;\n};\n\nexport type RxConflictHandlerOld<RxDocType> = (\n    i: RxConflictHandlerInput<RxDocType>,\n    context: string\n) => Promise<RxConflictHandlerOutput<RxDocType>>;\n\n\nexport type RxConflictHandler<RxDocType> = {\n    /**\n     * This must be non-async\n     * because it will be called very often and must be fast.\n     */\n    isEqual: (\n        a: WithDeleted<RxDocType>,\n        b: WithDeleted<RxDocType>,\n        context: string\n    ) => boolean;\n    resolve: (\n        i: RxConflictHandlerInput<RxDocType>,\n        context: string\n    ) => Promise<WithDeleted<RxDocType>>;\n};\n"],"mappings":"","ignoreList":[]}