{"version":3,"file":"hooks.js","names":["HOOKS","preAddRxPlugin","preCreateRxDatabase","createRxDatabase","preCreateRxCollection","createRxCollection","createRxState","postCloseRxCollection","postRemoveRxCollection","preCreateRxSchema","createRxSchema","prePrepareRxQuery","preCreateRxQuery","prePrepareQuery","createRxDocument","postCreateRxDocument","preCreateRxStorageInstance","preStorageWrite","preMigrateDocument","postMigrateDocument","preCloseRxDatabase","postRemoveRxDatabase","postCleanup","preReplicationMasterWrite","preReplicationMasterWriteDocumentsHandle","runPluginHooks","hookKey","obj","length","forEach","fun","runAsyncPluginHooks","fn","_clearHook","type","filter","h"],"sources":["../../src/hooks.ts"],"sourcesContent":["\n/**\n * hook-functions that can be extended by the plugin\n */\nexport const HOOKS = {\n    /**\n     * Runs before a plugin is added.\n     * Use this to block the usage of non-compatible plugins.\n     */\n    preAddRxPlugin: [],\n    /**\n     * functions that run before the database is created\n     */\n    preCreateRxDatabase: [],\n    /**\n     * runs after the database is created and prepared\n     * but before the instance is returned to the user\n     * @async\n     */\n    createRxDatabase: [],\n    preCreateRxCollection: [],\n    createRxCollection: [],\n    createRxState: [],\n    /**\n    * runs at the end of the close-process of a collection\n    * @async\n    */\n    postCloseRxCollection: [],\n    /**\n     * Runs after a collection is removed.\n     * @async\n     */\n    postRemoveRxCollection: [],\n    /**\n      * functions that get the json-schema as input\n      * to do additionally checks/manipulation\n      */\n    preCreateRxSchema: [],\n    /**\n     * functions that run after the RxSchema is created\n     * gets RxSchema as attribute\n     */\n    createRxSchema: [],\n    prePrepareRxQuery: [],\n    preCreateRxQuery: [],\n    /**\n     * Runs before a query is send to the\n     * prepareQuery function of the storage engine.\n     */\n    prePrepareQuery: [],\n    createRxDocument: [],\n    /**\n     * runs after a RxDocument is created,\n     * cannot be async\n     */\n    postCreateRxDocument: [],\n    /**\n     * Runs before a RxStorageInstance is created\n     * gets the params of createStorageInstance()\n     * as attribute so you can manipulate them.\n     * Notice that you have to clone stuff before mutating the inputs.\n     */\n    preCreateRxStorageInstance: [],\n    preStorageWrite: [],\n    /**\n     * runs on the document-data before the document is migrated\n     * {\n     *   doc: Object, // original doc-data\n     *   migrated: // migrated doc-data after run through migration-strategies\n     * }\n     */\n    preMigrateDocument: [],\n    /**\n     * runs after the migration of a document has been done\n     */\n    postMigrateDocument: [],\n    /**\n     * runs at the beginning of the close-process of a database\n     */\n    preCloseRxDatabase: [],\n    /**\n     * runs after a database has been removed\n     * @async\n     */\n    postRemoveRxDatabase: [],\n\n\n    postCleanup: [],\n\n    /**\n     * runs before the replication writes the rows to master\n     * but before the rows have been modified\n     * @async\n     */\n    preReplicationMasterWrite: [],\n\n    /**\n     * runs after the replication has been sent to the server\n     * but before the new documents have been handled\n     * @async\n     */\n    preReplicationMasterWriteDocumentsHandle: [],\n};\n\nexport function runPluginHooks(hookKey: keyof typeof HOOKS, obj: any) {\n    if (HOOKS[hookKey].length > 0) {\n        HOOKS[hookKey].forEach(fun => (fun as any)(obj));\n    }\n}\n\n\n/**\n * We do intentionally not run the hooks in parallel\n * because that makes stuff unpredictable and we use runAsyncPluginHooks()\n * only in places that are not that relevant for performance.\n */\nexport async function runAsyncPluginHooks(hookKey: keyof typeof HOOKS, obj: any): Promise<any> {\n    for (const fn of HOOKS[hookKey]) {\n        await (fn as any)(obj);\n    }\n}\n\n/**\n * used in tests to remove hooks\n */\nexport function _clearHook(type: keyof typeof HOOKS, fun: Function) {\n    HOOKS[type] = HOOKS[type].filter(h => h !== fun);\n}\n"],"mappings":"AACA;AACA;AACA;AACA,OAAO,IAAMA,KAAK,GAAG;EACjB;AACJ;AACA;AACA;EACIC,cAAc,EAAE,EAAE;EAClB;AACJ;AACA;EACIC,mBAAmB,EAAE,EAAE;EACvB;AACJ;AACA;AACA;AACA;EACIC,gBAAgB,EAAE,EAAE;EACpBC,qBAAqB,EAAE,EAAE;EACzBC,kBAAkB,EAAE,EAAE;EACtBC,aAAa,EAAE,EAAE;EACjB;AACJ;AACA;AACA;EACIC,qBAAqB,EAAE,EAAE;EACzB;AACJ;AACA;AACA;EACIC,sBAAsB,EAAE,EAAE;EAC1B;AACJ;AACA;AACA;EACIC,iBAAiB,EAAE,EAAE;EACrB;AACJ;AACA;AACA;EACIC,cAAc,EAAE,EAAE;EAClBC,iBAAiB,EAAE,EAAE;EACrBC,gBAAgB,EAAE,EAAE;EACpB;AACJ;AACA;AACA;EACIC,eAAe,EAAE,EAAE;EACnBC,gBAAgB,EAAE,EAAE;EACpB;AACJ;AACA;AACA;EACIC,oBAAoB,EAAE,EAAE;EACxB;AACJ;AACA;AACA;AACA;AACA;EACIC,0BAA0B,EAAE,EAAE;EAC9BC,eAAe,EAAE,EAAE;EACnB;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,kBAAkB,EAAE,EAAE;EACtB;AACJ;AACA;EACIC,mBAAmB,EAAE,EAAE;EACvB;AACJ;AACA;EACIC,kBAAkB,EAAE,EAAE;EACtB;AACJ;AACA;AACA;EACIC,oBAAoB,EAAE,EAAE;EAGxBC,WAAW,EAAE,EAAE;EAEf;AACJ;AACA;AACA;AACA;EACIC,yBAAyB,EAAE,EAAE;EAE7B;AACJ;AACA;AACA;AACA;EACIC,wCAAwC,EAAE;AAC9C,CAAC;AAED,OAAO,SAASC,cAAcA,CAACC,OAA2B,EAAEC,GAAQ,EAAE;EAClE,IAAI3B,KAAK,CAAC0B,OAAO,CAAC,CAACE,MAAM,GAAG,CAAC,EAAE;IAC3B5B,KAAK,CAAC0B,OAAO,CAAC,CAACG,OAAO,CAACC,GAAG,IAAKA,GAAG,CAASH,GAAG,CAAC,CAAC;EACpD;AACJ;;AAGA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeI,mBAAmBA,CAACL,OAA2B,EAAEC,GAAQ,EAAgB;EAC3F,KAAK,IAAMK,EAAE,IAAIhC,KAAK,CAAC0B,OAAO,CAAC,EAAE;IAC7B,MAAOM,EAAE,CAASL,GAAG,CAAC;EAC1B;AACJ;;AAEA;AACA;AACA;AACA,OAAO,SAASM,UAAUA,CAACC,IAAwB,EAAEJ,GAAa,EAAE;EAChE9B,KAAK,CAACkC,IAAI,CAAC,GAAGlC,KAAK,CAACkC,IAAI,CAAC,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKN,GAAG,CAAC;AACpD","ignoreList":[]}