{"version":3,"file":"check-query.js","names":["newRxError","newRxTypeError","deepEqual","findUndefinedPath","prepareQuery","checkQuery","args","isPlainObject","Object","prototype","toString","call","queryObj","op","collection","name","validKeys","keys","forEach","key","includes","limit","skip","query","ensureObjectDoesNotContainRegExp","checkMangoQuery","schema","rxQuery","jsonSchema","undefinedFieldPath","mangoQuery","field","massagedSelector","selector","schemaTopLevelFields","properties","filter","fieldOrOperator","startsWith","schemaIndexes","indexes","index","isInSchema","find","schemaIndex","areSelectorsSatisfiedByIndex","database","allowSlowCount","sort","map","sortPart","preparedQuery","queryPlan","selectorSatisfiedByIndex","value","RegExp","Array","isArray","item","isQueryAllowed"],"sources":["../../../../src/plugins/dev-mode/check-query.ts"],"sourcesContent":["import type {\n    RxPluginPreCreateRxQueryArgs,\n    MangoQuery,\n    RxPluginPrePrepareQueryArgs,\n    FilledMangoQuery,\n    RxJsonSchema,\n    RxDocumentData,\n    MangoQuerySelector,\n    PreparedQuery,\n    RxQueryOP,\n    RxPluginPrePrepareRxQueryArgs\n} from '../../types/index.d.ts';\nimport { newRxError, newRxTypeError } from '../../rx-error.ts';\nimport { deepEqual, findUndefinedPath } from '../utils/index.ts';\nimport { prepareQuery } from '../../rx-query-helper.ts';\n\n/**\n * accidentally passing a non-valid object into the query params\n * is very hard to debug especially when queries are observed\n * This is why we do some checks here in dev-mode\n */\nexport function checkQuery(args: RxPluginPreCreateRxQueryArgs) {\n    const isPlainObject = Object.prototype.toString.call(args.queryObj) === '[object Object]';\n    if (!isPlainObject) {\n        throw newRxTypeError('QU11', {\n            op: args.op,\n            collection: args.collection.name,\n            queryObj: args.queryObj\n        });\n    }\n\n    const validKeys: (keyof MangoQuery)[] = [\n        'selector',\n        'limit',\n        'skip',\n        'sort',\n        'index'\n    ];\n    Object.keys(args.queryObj).forEach(key => {\n        if (!(validKeys as string[]).includes(key)) {\n            throw newRxTypeError('QU11', {\n                op: args.op,\n                collection: args.collection.name,\n                queryObj: args.queryObj,\n                key,\n                args: {\n                    validKeys\n                }\n            });\n        }\n    });\n\n    // do not allow skip or limit for count queries\n    if (\n        args.op === 'count' &&\n        (\n            args.queryObj.limit ||\n            args.queryObj.skip\n        )\n    ) {\n        throw newRxError(\n            'QU15',\n            {\n                collection: args.collection.name,\n                query: args.queryObj\n            }\n        );\n    }\n\n    ensureObjectDoesNotContainRegExp(args.queryObj);\n}\n\n\nexport function checkMangoQuery(args: RxPluginPrePrepareQueryArgs) {\n    const schema = args.rxQuery.collection.schema.jsonSchema;\n\n    const undefinedFieldPath = findUndefinedPath(args.mangoQuery);\n    if (undefinedFieldPath) {\n        throw newRxError('QU19', {\n            field: undefinedFieldPath,\n            query: args.mangoQuery,\n        });\n    }\n\n    /**\n     * Ensure that all top level fields are included in the schema.\n     * TODO this check can be augmented to also check sub-fields.\n     */\n    const massagedSelector: MangoQuerySelector<any> = args.mangoQuery.selector;\n    const schemaTopLevelFields = Object.keys(schema.properties);\n    Object.keys(massagedSelector)\n        // do not check operators\n        .filter(fieldOrOperator => !fieldOrOperator.startsWith('$'))\n        // skip this check on non-top-level fields\n        .filter(field => !field.includes('.'))\n        .forEach(field => {\n            if (!schemaTopLevelFields.includes(field)) {\n                throw newRxError('QU13', {\n                    schema,\n                    field,\n                    query: args.mangoQuery,\n                });\n            }\n        });\n\n    /**\n     * ensure if custom index is set,\n     * it is also defined in the schema\n     */\n    const schemaIndexes = schema.indexes ? schema.indexes : [];\n    const index = args.mangoQuery.index;\n    if (index) {\n        const isInSchema = schemaIndexes.find(schemaIndex => deepEqual(schemaIndex, index));\n        if (!isInSchema) {\n            throw newRxError(\n                'QU12',\n                {\n                    collection: args.rxQuery.collection.name,\n                    query: args.mangoQuery,\n                    schema\n                }\n            );\n        }\n    }\n\n\n    /**\n     * Ensure that a count() query can only be used\n     * with selectors that are fully satisfied by the used index.\n     */\n    if (args.rxQuery.op === 'count') {\n        if (\n            !areSelectorsSatisfiedByIndex(\n                args.rxQuery.collection.schema.jsonSchema,\n                args.mangoQuery\n            ) &&\n            !args.rxQuery.collection.database.allowSlowCount\n        ) {\n            throw newRxError('QU14', {\n                collection: args.rxQuery.collection,\n                query: args.mangoQuery\n            });\n        }\n    }\n\n    /**\n     * Ensure that sort only runs on known fields\n     * TODO also check nested fields\n     */\n    if (args.mangoQuery.sort) {\n        args.mangoQuery.sort\n            .map(sortPart => Object.keys(sortPart)[0])\n            .filter(field => !field.includes('.'))\n            .forEach(field => {\n                if (!schemaTopLevelFields.includes(field)) {\n                    throw newRxError('QU13', {\n                        schema,\n                        field,\n                        query: args.mangoQuery,\n                    });\n                }\n            });\n    }\n\n    // Do not allow RexExp instances\n    ensureObjectDoesNotContainRegExp(args.mangoQuery);\n}\n\n\nexport function areSelectorsSatisfiedByIndex<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    query: FilledMangoQuery<RxDocType>\n): boolean {\n    const preparedQuery: PreparedQuery<any> = prepareQuery(\n        schema,\n        query\n    );\n    return preparedQuery.queryPlan.selectorSatisfiedByIndex;\n}\n\n/**\n * Ensures that the selector does not contain any RegExp instance.\n * @recursive\n */\nexport function ensureObjectDoesNotContainRegExp(selector: any) {\n    if (typeof selector !== 'object' || selector === null) {\n        return;\n    }\n    const keys = Object.keys(selector);\n    keys.forEach(key => {\n        const value: any = selector[key];\n        if (value instanceof RegExp) {\n            throw newRxError('QU16', {\n                field: key,\n                query: selector,\n            });\n        } else if (Array.isArray(value)) {\n            value.forEach(item => ensureObjectDoesNotContainRegExp(item));\n        } else {\n            ensureObjectDoesNotContainRegExp(value);\n        }\n    });\n}\n\n\n/**\n * People often use queries wrong\n * so we have some checks here.\n * For example people use numbers as primary keys\n * which is not allowed.\n */\nexport function isQueryAllowed(args: RxPluginPrePrepareRxQueryArgs) {\n    if (args.op === 'findOne') {\n        if (\n            typeof args.queryObj === 'number' ||\n            Array.isArray(args.queryObj)\n        ) {\n            throw newRxTypeError('COL6', {\n                collection: args.collection.name,\n                queryObj: args.queryObj\n            });\n        }\n    } else if (args.op === 'find') {\n        if (typeof args.queryObj === 'string') {\n            throw newRxError('COL5', {\n                collection: args.collection.name,\n                queryObj: args.queryObj\n            });\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}