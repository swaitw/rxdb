{"version":3,"file":"index.js","names":["createRevision","clone","randomToken","blobToBase64String","prepareQuery","migrateStorage","params","collections","Object","values","database","batchSize","parallel","Promise","all","map","collection","migrateCollection","oldDatabaseName","oldStorage","afterMigrateBatch","logFunction","log","message","name","schema","jsonSchema","primaryPath","oldDatabaseInstanceToken","oldStorageInstance","createStorageInstance","databaseName","collectionName","multiInstance","options","databaseInstanceToken","devMode","plainQuery","selector","_deleted","$eq","limit","sort","skip","preparedQuery","_loop","queryResult","query","docs","documents","length","remove","v","docsNonMutated","attachments","doc","docId","entries","_attachments","attachmentId","attachmentMeta","attachmentData","getAttachmentData","digest","attachmentDataString","data","type","insertToNewWriteRows","document","writeToNewResult","storageInstance","bulkWrite","writeToOldRows","_doc","idx","previous","_meta","lwt","Date","getTime","newDoc","_rev","writeToOldResult","keys","error","console","dir","errors","Error","err","cleanup","_ret"],"sources":["../../../../src/plugins/migration-storage/index.ts"],"sourcesContent":["import {\n    RxDatabase,\n    RxCollection,\n    createRevision,\n    clone,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    randomToken,\n    RxStorage,\n    blobToBase64String,\n    prepareQuery,\n    PreparedQuery,\n    FilledMangoQuery\n} from '../../index.ts';\n\nexport type RxStorageOld<A, B> = RxStorage<A, B> | any;\n\nexport type AfterMigrateBatchHandlerInput = {\n    databaseName: string;\n    collectionName: string;\n    oldDatabaseName: string;\n    insertToNewWriteRows: BulkWriteRow<any>[];\n    writeToNewResult: RxStorageBulkWriteResponse<any>;\n};\nexport type AfterMigrateBatchHandler = (\n    input: AfterMigrateBatchHandlerInput\n) => any | Promise<any>;\n\n\nexport type MigrateStorageParams = {\n    database: RxDatabase;\n    /**\n     * Using the migration plugin requires you\n     * to rename your new old database.\n     * The original name of the v11 database must be provided here.\n     */\n    oldDatabaseName: string;\n    oldStorage: RxStorageOld<any, any>;\n    batchSize?: number;\n    parallel?: boolean;\n    afterMigrateBatch?: AfterMigrateBatchHandler;\n    // to log each step, pass console.log.bind(console) here.\n    logFunction?: (message: string) => void;\n}\n\n/**\n * Migrates collections of RxDB version A and puts them\n * into a RxDatabase that is created with version B.\n * This function only works from the previous major version upwards.\n * Do not use it to migrate like rxdb v9 to v14.\n */\nexport async function migrateStorage(\n    params: MigrateStorageParams\n): Promise<void> {\n    const collections = Object.values(params.database.collections);\n    const batchSize = params.batchSize ? params.batchSize : 10;\n    if (params.parallel) {\n        await Promise.all(\n            collections.map(collection => migrateCollection(\n                collection,\n                params.oldDatabaseName,\n                params.oldStorage,\n                batchSize,\n                params.afterMigrateBatch,\n                params.logFunction\n            ))\n        );\n    } else {\n        for (const collection of collections) {\n            await migrateCollection(\n                collection,\n                params.oldDatabaseName,\n                params.oldStorage,\n                batchSize,\n                params.afterMigrateBatch,\n                params.logFunction\n            );\n        }\n    }\n}\n\nexport async function migrateCollection<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    oldDatabaseName: string,\n    oldStorage: RxStorageOld<any, any>,\n    batchSize: number,\n    afterMigrateBatch?: AfterMigrateBatchHandler,\n    // to log each step, pass console.log.bind(console) here.\n    logFunction?: (message: string) => void\n) {\n    function log(message: string) {\n        if (logFunction) {\n            logFunction('migrateCollection(' + collection.name + ')' + message);\n        }\n    }\n    log('start migrateCollection()');\n    let schema = collection.schema.jsonSchema;\n    const primaryPath = collection.schema.primaryPath;\n    const oldDatabaseInstanceToken = randomToken(10);\n\n    const oldStorageInstance = await oldStorage.createStorageInstance({\n        databaseName: oldDatabaseName,\n        collectionName: collection.name,\n        multiInstance: false,\n        options: {},\n        schema: schema,\n        databaseInstanceToken: oldDatabaseInstanceToken,\n        devMode: false\n    });\n\n\n    const plainQuery: FilledMangoQuery<RxDocType> = {\n        selector: {\n            _deleted: {\n                $eq: false\n            }\n        } as any,\n        limit: batchSize,\n        sort: [{ [primaryPath]: 'asc' } as any],\n        skip: 0\n    };\n\n    const preparedQuery = prepareQuery(\n        schema,\n        plainQuery\n    );\n\n    while (true) {\n        log('loop once');\n        /**\n         * Get a batch of documents\n         */\n        const queryResult = await oldStorageInstance.query(preparedQuery);\n        const docs = queryResult.documents;\n        if (docs.length === 0) {\n            /**\n             * No more documents to migrate\n             */\n            log('migration of collection done');\n            await oldStorageInstance.remove();\n            return;\n        }\n\n        const docsNonMutated = clone(docs);\n\n        /**\n         * Get attachments\n         * if defined in the schema.\n         */\n        if (schema.attachments) {\n            await Promise.all(\n                docs.map(async (doc: any) => {\n                    const docId: string = (doc as any)[primaryPath];\n                    await Promise.all(\n                        Object.entries(doc._attachments).map(async ([attachmentId, attachmentMeta]) => {\n                            const attachmentData = await oldStorageInstance.getAttachmentData(\n                                docId,\n                                attachmentId,\n                                (attachmentMeta as any).digest\n                            );\n                            const attachmentDataString = await blobToBase64String(attachmentData);\n                            (doc as any)._attachments[attachmentId] = {\n                                data: attachmentDataString,\n                                digest: (attachmentMeta as any).digest,\n                                length: (attachmentMeta as any).length,\n                                type: (attachmentMeta as any).type\n                            }\n                        })\n                    );\n                })\n            );\n            log('got attachments');\n        }\n\n        /**\n         * Insert the documents to the new storage\n         */\n        const insertToNewWriteRows: BulkWriteRow<any>[] = docs.map((document: any) => {\n            return { document };\n        });\n        const writeToNewResult: RxStorageBulkWriteResponse<any> = await collection.storageInstance.bulkWrite(\n            insertToNewWriteRows,\n            'migrate-storage'\n        );\n        log('written batch to new storage');\n\n        // TODO we should throw on non-conflict errors here.\n        // if (Object.keys(writeToNewResult.error).length > 0) {\n        //     throw new Error('could not write to new storage');\n        // }\n\n        /**\n         * Remove the docs from the old storage\n         */\n        const writeToOldRows = docs.map((_doc: any, idx: number) => {\n            const previous = docsNonMutated[idx];\n            if (!previous._meta) {\n                previous._meta = {\n                    lwt: new Date().getTime()\n                };\n            }\n\n            const newDoc: typeof previous = clone(previous);\n            newDoc._deleted = true;\n            if (!newDoc._meta) {\n                newDoc._meta = {\n                    lwt: new Date().getTime()\n                };\n            }\n            newDoc._meta.lwt = new Date().getTime() + 1;\n            newDoc._rev = createRevision(\n                oldDatabaseInstanceToken,\n                previous\n            );\n\n            return {\n                previous,\n                document: newDoc,\n            }\n        });\n        try {\n            const writeToOldResult = await oldStorageInstance.bulkWrite(\n                writeToOldRows,\n                'migrate-between-rxdb-versions'\n            );\n            if (Object.keys(writeToOldResult.error).length > 0) {\n                console.dir({\n                    writeToOldRows,\n                    errors: writeToOldResult.error\n                });\n                throw new Error('got error while deleting migrated documents on the old storage');\n            }\n        } catch (err) {\n            log('could not delete on old instance');\n            console.dir(err);\n            throw err;\n        }\n        log('deleted batch on old storage');\n        await oldStorageInstance.cleanup(0);\n\n        // run the handler if provided\n        if (afterMigrateBatch) {\n            await afterMigrateBatch({\n                databaseName: collection.database.name,\n                collectionName: collection.name,\n                oldDatabaseName,\n                insertToNewWriteRows,\n                writeToNewResult\n            });\n        }\n    }\n}\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]}