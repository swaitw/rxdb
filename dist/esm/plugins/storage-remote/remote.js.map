{"version":3,"file":"remote.js","names":["filter","deepEqual","ensureNotFalsy","RXDB_VERSION","createAnswer","createErrorAnswer","getChangedDocumentsSince","newRxError","exposeRxStorageRemote","settings","instanceByFullName","Map","messages$","pipe","msg","method","subscribe","customRequestHandler","send","Error","result","params","err","getRxStorageInstance","storage","createStorageInstance","database","storageInstances","Array","from","collectionName","storageInstance","find","instance","console","dir","JSON","stringify","schema","existingSchema","Promise","resolve","mustBeRxDBVersion","fakeVersion","version","args","mainVersion","remoteVersion","connectionId","isArray","fullName","databaseName","join","state","get","storageInstancePromise","connectionIds","Set","set","add","subs","push","changeStream","changes","message","answerTo","return","connectionClosed","closeThisConnection","forEach","sub","unsubscribe","delete","collection","collections","onClose","subMsg","plainMessage","size"],"sources":["../../../../src/plugins/storage-remote/remote.ts"],"sourcesContent":["import { filter, Subscription } from 'rxjs';\nimport type {\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from '../../types/index.d.ts';\nimport {\n    deepEqual,\n    ensureNotFalsy,\n    RXDB_VERSION\n} from '../../plugins/utils/index.ts';\nimport { createAnswer, createErrorAnswer } from './storage-remote-helpers.ts';\nimport type {\n    MessageFromRemote,\n    MessageToRemote,\n    RxStorageRemoteExposeSettings,\n    RxStorageRemoteExposeSettingsRxDatabase,\n    RxStorageRemoteExposeSettingsRxStorage,\n    RxStorageRemoteExposeType\n} from './storage-remote-types.ts';\nimport { getChangedDocumentsSince } from '../../rx-storage-helper.ts';\nimport { newRxError } from '../../rx-error.ts';\n\n/**\n * Run this on the 'remote' part,\n * so that RxStorageMessageChannel can connect to it.\n */\nexport function exposeRxStorageRemote(settings: RxStorageRemoteExposeSettings): RxStorageRemoteExposeType {\n    type InstanceState = {\n        storageInstancePromise: Promise<RxStorageInstance<any, any, any>>;\n        connectionIds: Set<string>;\n        params: RxStorageInstanceCreationParams<any, any>;\n    };\n    const instanceByFullName: Map<string, InstanceState> = new Map();\n\n\n    settings.messages$.pipe(\n        filter(msg => msg.method === 'custom')\n    ).subscribe(async (msg) => {\n        if (!settings.customRequestHandler) {\n            settings.send(createErrorAnswer(\n                msg,\n                new Error('Remote storage: cannot resolve custom request because settings.customRequestHandler is not set')\n            ));\n        } else {\n            try {\n                const result = await settings.customRequestHandler(msg.params);\n                settings.send(createAnswer(msg, result));\n            } catch (err: any) {\n                settings.send(createErrorAnswer(\n                    msg,\n                    err\n                ));\n            }\n        }\n    });\n\n\n    function getRxStorageInstance<RxDocType>(params: any): Promise<RxStorageInstance<RxDocType, any, any, any>> {\n        if ((settings as RxStorageRemoteExposeSettingsRxStorage).storage) {\n            return (settings as RxStorageRemoteExposeSettingsRxStorage).storage.createStorageInstance(params);\n        } else if ((settings as RxStorageRemoteExposeSettingsRxDatabase).database) {\n            const storageInstances = Array.from((settings as RxStorageRemoteExposeSettingsRxDatabase).database.storageInstances);\n            const collectionName = params.collectionName;\n            const storageInstance = storageInstances.find(instance => instance.collectionName === collectionName);\n            if (!storageInstance) {\n                console.dir(storageInstances);\n                throw new Error('storageInstance does not exist ' + JSON.stringify({\n                    collectionName\n                }));\n            }\n            const schema = params.schema;\n            if (!deepEqual(schema, storageInstance.schema)) {\n                throw new Error('Wrong schema ' + JSON.stringify({\n                    schema,\n                    existingSchema: storageInstance.schema\n                }));\n            }\n            return Promise.resolve(storageInstance);\n        } else {\n            throw new Error('no base given');\n        }\n    }\n\n    const mustBeRxDBVersion = settings.fakeVersion ? settings.fakeVersion : RXDB_VERSION;\n    settings.messages$.pipe(\n        filter(msg => msg.method === 'create')\n    ).subscribe(async (msg) => {\n        if (msg.version !== mustBeRxDBVersion) {\n            settings.send(createErrorAnswer(msg, newRxError('RM1', {\n                args: {\n                    mainVersion: msg.version,\n                    remoteVersion: mustBeRxDBVersion\n                }\n            })));\n            return;\n        }\n\n        const connectionId = msg.connectionId;\n\n        /**\n         * Do an isArray check here\n         * for runtime check types to ensure we have\n         * instance creation params and not method input params.\n        */\n        if (Array.isArray(msg.params)) {\n            return;\n        }\n        const params = msg.params;\n        const collectionName = params.collectionName;\n\n        /**\n         * We de-duplicate the storage instances.\n         * This makes sense in many environments like\n         * electron where on main process contains the storage\n         * for multiple renderer processes. Same goes for SharedWorkers etc.\n         */\n        const fullName = [\n            params.databaseName,\n            params.collectionName,\n            params.schema.version\n        ].join('|');\n        let state = instanceByFullName.get(fullName);\n        if (!state) {\n            try {\n                state = {\n                    /**\n                     * We work with a promise here to ensure\n                     * that parallel create-calls will still end up\n                     * with exactly one instance and not more.\n                     */\n                    storageInstancePromise: getRxStorageInstance(params),\n                    connectionIds: new Set(),\n                    params\n                };\n                instanceByFullName.set(fullName, state);\n\n                /**\n                 * Must await the creation here\n                 * so that in case of an error,\n                 * it knows about the error message and can send\n                 * that back to the main process. \n                 */\n                await state.storageInstancePromise;\n            } catch (err: any) {\n                settings.send(createErrorAnswer(msg, err));\n                return;\n            }\n        } else {\n            // if instance already existed, ensure that the schema is equal\n            if (!deepEqual(params.schema, state.params.schema)) {\n                settings.send(createErrorAnswer(msg, new Error('Remote storage: schema not equal to existing storage')));\n                return;\n            }\n        }\n        state.connectionIds.add(msg.connectionId);\n        const subs: Subscription[] = [];\n\n        const storageInstance = await state.storageInstancePromise;\n        /**\n         * Automatically subscribe to the changeStream()\n         * because we always need them.\n         */\n        subs.push(\n            storageInstance.changeStream().subscribe(changes => {\n                const message: MessageFromRemote = {\n                    connectionId,\n                    answerTo: 'changestream',\n                    method: 'changeStream',\n                    return: changes\n                };\n                settings.send(message);\n            })\n        );\n\n        let connectionClosed = false;\n        function closeThisConnection() {\n            if (connectionClosed) {\n                return;\n            }\n            connectionClosed = true;\n            subs.forEach(sub => sub.unsubscribe());\n            ensureNotFalsy(state).connectionIds.delete(connectionId);\n            instanceByFullName.delete(fullName);\n            /**\n             * TODO how to notify the other ports on remove() ?\n             */\n        }\n\n        // also close the connection when the collection gets closed\n        if ((settings as RxStorageRemoteExposeSettingsRxDatabase).database) {\n            const database = (settings as RxStorageRemoteExposeSettingsRxDatabase).database;\n            const collection = database.collections[collectionName];\n            if (collection) {\n                collection.onClose.push(() => closeThisConnection());\n            } else {\n                database.onClose.push(() => closeThisConnection());\n            }\n        }\n\n        subs.push(\n            settings.messages$.pipe(\n                filter(subMsg => (subMsg as MessageToRemote).connectionId === connectionId)\n            ).subscribe(async (plainMessage) => {\n                const message: MessageToRemote = plainMessage as any;\n                if (\n                    message.method === 'create' ||\n                    message.method === 'custom'\n                ) {\n                    return;\n                }\n                if (!Array.isArray(message.params)) {\n                    return;\n                }\n                let result;\n                try {\n                    if (\n                        message.method === 'close' &&\n                        (settings as RxStorageRemoteExposeSettingsRxDatabase).database\n                    ) {\n                        /**\n                         * Do not close the storageInstance if it was taken from\n                         * a running RxDatabase.\n                         * In that case we only close the instance\n                         * when the RxDatabase gets closed.\n                         */\n                        settings.send(createAnswer(message, null));\n                        return;\n                    }\n                    /**\n                     * On calls to 'close()',\n                     * we only close the main instance if there are no other\n                     * ports connected.\n                     */\n                    if (\n                        message.method === 'close' &&\n                        ensureNotFalsy(state).connectionIds.size > 1\n                    ) {\n                        settings.send(createAnswer(message, null));\n                        ensureNotFalsy(state).connectionIds.delete(connectionId);\n                        subs.forEach(sub => sub.unsubscribe());\n                        return;\n                    }\n\n                    if (message.method === 'getChangedDocumentsSince' && !storageInstance.getChangedDocumentsSince) {\n                        result = await getChangedDocumentsSince(\n                            storageInstance,\n                            message.params[0],\n                            message.params[1]\n                        );\n                    } else {\n                        result = await (storageInstance as any)[message.method](\n                            message.params[0],\n                            message.params[1],\n                            message.params[2],\n                            message.params[3]\n                        );\n                    }\n                    if (\n                        message.method === 'close' ||\n                        message.method === 'remove'\n                    ) {\n                        closeThisConnection();\n                    }\n                    settings.send(createAnswer(message, result));\n                } catch (err: any) {\n                    settings.send(createErrorAnswer(message, err));\n                }\n            })\n        );\n\n        settings.send(createAnswer(msg, 'ok'));\n    });\n\n    return {\n        instanceByFullName\n    };\n}\n"],"mappings":"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","ignoreList":[]}