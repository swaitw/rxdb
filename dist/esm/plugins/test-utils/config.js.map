{"version":3,"file":"config.js","names":["ensureNotFalsy","isPromise","randomToken","enforceOptions","broadcastChannelEnforceOptions","events","wrappedKeyEncryptionCryptoJsStorage","isDeno","Deno","window","isBun","process","versions","bun","isNode","config","setConfig","newConfig","initDone","getConfig","initTestEnvironment","getEnvVariables","ret","forEach","k","env","get","__karma__","ENV_VARIABLES","DEFAULT_STORAGE","isFastMode","NODE_ENV","err","type","oldConsoleLog","console","log","bind","oldConsoleDir","dir","newLog","value","Error","JSON","stringify","setMaxListeners","EventEmitter","defaultMaxListeners","startTime","performance","now","logTime","msg","diff","getEncryptedStorage","baseStorage","storage","getStorage","hasEncryption","isNotOneOfTheseStorages","storageNames","isName","name","includes","getPassword","Promise","resolve"],"sources":["../../../../src/plugins/test-utils/config.ts"],"sourcesContent":["/// <reference path=\"../../../node_modules/@types/mocha/index.d.ts\" />\nimport {\n    ensureNotFalsy,\n    isPromise,\n    randomToken\n} from '../utils/index.ts';\nimport {\n    enforceOptions as broadcastChannelEnforceOptions\n} from 'broadcast-channel';\nimport events from 'node:events';\nimport * as path from 'node:path';\nimport url from 'node:url';\nimport type { RxStorage, RxTestStorage } from '../../types';\nimport { wrappedKeyEncryptionCryptoJsStorage } from '../encryption-crypto-js/index.ts';\n\nexport type TestConfig = {\n    storage: RxTestStorage;\n};\n\nexport const isDeno = typeof Deno !== 'undefined' || (typeof window !== 'undefined' && 'Deno' in window);\nexport const isBun = typeof process !== 'undefined' && !!process.versions.bun;\nexport const isNode = !isDeno && !isBun && typeof window === 'undefined';\n\nlet config: TestConfig;\n\nexport function setConfig(newConfig: TestConfig) {\n    config = newConfig;\n}\n\nlet initDone = false;\nexport function getConfig() {\n    if (!initDone) {\n        initTestEnvironment();\n        initDone = true;\n    }\n    return ensureNotFalsy(config, 'testConfig not set')\n}\n\n\ndeclare const Deno: any;\nfunction getEnvVariables() {\n    if (isDeno) {\n        const ret: any = {};\n        [\n            'DEFAULT_STORAGE',\n            'NODE_ENV'\n        ].forEach(k => {\n            ret[k] = Deno.env.get(k);\n        });\n        return ret;\n    }\n\n    return isBun || isNode ? process.env : (window as any).__karma__.config.env;\n}\nexport const ENV_VARIABLES = getEnvVariables();\nexport const DEFAULT_STORAGE = ENV_VARIABLES.DEFAULT_STORAGE as string;\n\nexport function isFastMode(): boolean {\n    try {\n        return ENV_VARIABLES.NODE_ENV === 'fast';\n    } catch (err) {\n        return false;\n    }\n}\n\nexport function initTestEnvironment() {\n    if (ENV_VARIABLES.NODE_ENV === 'fast') {\n        broadcastChannelEnforceOptions({\n            type: 'simulate'\n        });\n    }\n\n    /**\n     * Overwrite the console for easier debugging\n     */\n    const oldConsoleLog = console.log.bind(console);\n    const oldConsoleDir = console.dir.bind(console);\n    function newLog(this: typeof console, value: any) {\n        if (isPromise(value)) {\n            oldConsoleDir(value);\n            throw new Error('cannot log Promise(), you should await it first');\n        }\n        if (typeof value === 'string' || typeof value === 'number') {\n            oldConsoleLog(value);\n            return;\n        }\n        try {\n            JSON.stringify(value);\n            oldConsoleLog(JSON.stringify(value, null, 4));\n        } catch (err) {\n            oldConsoleDir(value);\n        }\n    }\n    console.log = newLog.bind(console);\n    console.dir = newLog.bind(console);\n\n    console.log('DEFAULT_STORAGE: ' + DEFAULT_STORAGE);\n\n    if (isNode) {\n        process.setMaxListeners(100);\n\n        events.EventEmitter.defaultMaxListeners = 100;\n\n        /**\n         * Add a global function to process, so we can debug timings\n         */\n        (process as any).startTime = performance.now();\n        (process as any).logTime = (msg: string = '') => {\n            const diff = performance.now() - (process as any).startTime;\n            console.log('process logTime(' + msg + ') ' + diff + 'ms');\n        };\n    }\n}\n\nexport function getEncryptedStorage(baseStorage = getConfig().storage.getStorage()): RxStorage<any, any> {\n    const ret = config.storage.hasEncryption ?\n        baseStorage :\n        wrappedKeyEncryptionCryptoJsStorage({\n            storage: baseStorage\n        });\n    return ret;\n}\n\nexport function isNotOneOfTheseStorages(storageNames: string[]) {\n    const isName = getConfig().storage.name;\n    if (storageNames.includes(isName)) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\nexport function getPassword(): Promise<string> {\n    if (getConfig().storage.hasEncryption) {\n        return ensureNotFalsy(getConfig().storage.hasEncryption)();\n    } else {\n        return Promise.resolve('test-password-' + randomToken(10));\n    }\n}\n"],"mappings":"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","ignoreList":[]}