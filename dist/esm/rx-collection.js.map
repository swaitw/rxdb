{"version":3,"file":"rx-collection.js","names":["filter","map","mergeMap","ucfirst","flatClone","promiseSeries","pluginMissing","ensureNotFalsy","getFromMapOrThrow","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_VOID","NON_PREMIUM_COLLECTION_LIMIT","hasPremiumFlag","fillObjectDataBeforeInsert","createRxCollectionStorageInstance","removeCollectionStorages","ensureRxCollectionIsNotClosed","createRxQuery","_getDefaultQuery","newRxError","newRxTypeError","DocumentCache","mapDocumentsDataToCacheDocs","createQueryCache","defaultCacheReplacementPolicy","createChangeEventBuffer","runAsyncPluginHooks","runPluginHooks","createNewRxDocument","getRxDocumentConstructor","getWrappedStorageInstance","getWrittenDocumentsFromBulkWriteResponse","throwIfIsStorageWriteError","IncrementalWriteQueue","beforeDocumentUpdateWrite","overwritable","defaultConflictHandler","rxChangeEventBulkToRxChangeEvents","HOOKS_WHEN","HOOKS_KEYS","hooksApplied","OPEN_COLLECTIONS","Set","RxCollectionBase","database","name","schema","internalStorageInstance","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","statics","conflictHandler","storageInstance","timeouts","incrementalWriteQueue","awaitBeforeReads","_incrementalUpsertQueues","Map","synced","hooks","_subs","_docCache","_queryCache","$","checkpoint$","_changeEventBuffer","eventBulks$","onClose","closed","onRemove","_applyHookFunctions","asRxCollection","pipe","changeEventBulk","collectionName","add","_proto","prototype","prepare","count","size","promiseWait","collection","args","existing","Array","from","values","c","db","jsonSchema","primaryPath","newData","oldData","result","_runHooks","checkpoint","documentConstructor","bulk","isLocal","events","docData","listenToRemoveSub","internalStore","changeStream","key","version","found","find","event","documentData","context","operation","subscribe","close","Promise","all","fn","push","databaseStorageToken","storageToken","subDocs","eventBulk","id","internal","databaseToken","token","$emit","cleanup","_minimumDeletedTime","migrationNeeded","getMigrationState","startMigration","batchSize","migratePromise","insert","json","writeResult","bulkInsert","isError","error","insertResult","success","insertIfNotExists","length","status","conflictDocData","documentInDb","docsData","ids","insertRows","hasHooks","useDocData","then","document","index","documents","results","bulkWrite","rxDocuments","ret","docsMap","forEach","row","doc","set","get","primary","bulkRemove","idsOrDocs","rxDocumentMap","findByIds","exec","d","rxDocument","data","toMutableJSON","removeDocs","writeDoc","_deleted","previous","deletedRxDocuments","successIds","getCachedRxDocument","bulkUpsert","insertData","useJsonByDocId","useJson","slice","err","documentId","writeData","docDataInDb","getCachedRxDocuments","newDoc","incrementalModify","upsert","bulkResult","incrementalUpsert","queue","_incrementalUpsertEnsureRxDocumentExists","wasInserted","inserted","_incrementalUpsertUpdate","queryObj","op","query","findOne","selector","limit","mangoQuery","$in","exportJSON","importJSON","_exportedJSON","insertCRDT","_updateObj","addPipeline","_options","addHook","when","fun","parallel","includes","boundFun","bind","runName","series","getHooks","instance","tasks","hook","_runHooksSync","time","res","timeout","setTimeout","delete","clearTimeout","requestIdlePromise","sub","unsubscribe","collections","remove","storage","multiInstance","password","hashFunction","_createClass","cE","colProto","Object","getPrototypeOf","fnName","_innerDoc","rxCollection","docDataFromCache","getLatestDocumentDataIfExists","resolve","createRxCollection","autoMigrate","localDocuments","storageInstanceCreationParams","databaseInstanceToken","databaseName","devMode","isDevMode","entries","funName","defineProperty","creator","catch","reject","isRxCollection","obj"],"sources":["../../src/rx-collection.ts"],"sourcesContent":["import {\n    filter,\n    map,\n    mergeMap\n} from 'rxjs';\n\nimport {\n    ucfirst,\n    flatClone,\n    promiseSeries,\n    pluginMissing,\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID,\n    NON_PREMIUM_COLLECTION_LIMIT,\n    hasPremiumFlag\n} from './plugins/utils/index.ts';\nimport {\n    fillObjectDataBeforeInsert,\n    createRxCollectionStorageInstance,\n    removeCollectionStorages,\n    ensureRxCollectionIsNotClosed\n} from './rx-collection-helper.ts';\nimport {\n    createRxQuery,\n    _getDefaultQuery\n} from './rx-query.ts';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error.ts';\nimport type {\n    RxMigrationState\n} from './plugins/migration-schema/index.ts';\nimport {\n    DocumentCache,\n    mapDocumentsDataToCacheDocs\n} from './doc-cache.ts';\nimport {\n    QueryCache,\n    createQueryCache,\n    defaultCacheReplacementPolicy\n} from './query-cache.ts';\nimport {\n    ChangeEventBuffer,\n    createChangeEventBuffer\n} from './change-event-buffer.ts';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from './hooks.ts';\n\nimport {\n    Subscription,\n    Observable\n} from 'rxjs';\n\nimport type {\n    KeyFunctionMap,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    RxDumpCollection,\n    RxDumpCollectionAny,\n    MangoQuery,\n    MangoQueryNoLimit,\n    RxCacheReplacementPolicy,\n    RxStorageWriteError,\n    RxDocumentData,\n    RxStorageInstanceCreationParams,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxChangeEventInsert,\n    RxChangeEventUpdate,\n    RxChangeEventDelete,\n    RxStorageInstance,\n    CollectionsOfDatabase,\n    RxChangeEventBulk,\n    RxLocalDocumentData,\n    RxDocumentBase,\n    RxConflictHandler,\n    MaybePromise,\n    CRDTEntry,\n    MangoQuerySelectorAndIndex,\n    MigrationStrategies\n} from './types/index.d.ts';\n\nimport {\n    RxSchema\n} from './rx-schema.ts';\n\nimport {\n    createNewRxDocument,\n    getRxDocumentConstructor\n} from './rx-document-prototype-merge.ts';\nimport {\n    getWrappedStorageInstance,\n    getWrittenDocumentsFromBulkWriteResponse,\n    throwIfIsStorageWriteError,\n    WrappedRxStorageInstance\n} from './rx-storage-helper.ts';\nimport { IncrementalWriteQueue } from './incremental-write.ts';\nimport { beforeDocumentUpdateWrite } from './rx-document.ts';\nimport { overwritable } from './overwritable.ts';\nimport type { RxPipeline, RxPipelineOptions } from './plugins/pipeline/index.ts';\nimport { defaultConflictHandler } from './replication-protocol/default-conflict-handler.ts';\nimport { rxChangeEventBulkToRxChangeEvents } from './rx-change-event.ts';\n\nconst HOOKS_WHEN = ['pre', 'post'] as const;\ntype HookWhenType = typeof HOOKS_WHEN[number];\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'] as const;\ntype HookKeyType = typeof HOOKS_KEYS[number];\nlet hooksApplied = false;\n\nexport const OPEN_COLLECTIONS = new Set<RxCollectionBase<any, any, any>>();\n\nexport class RxCollectionBase<\n    InstanceCreationOptions,\n    RxDocumentType = { [prop: string]: any; },\n    OrmMethods = {},\n    StaticMethods = { [key: string]: any; },\n    Reactivity = any\n> {\n\n\n    /**\n     * Stores all 'normal' documents\n     */\n    public storageInstance: WrappedRxStorageInstance<RxDocumentType, any, InstanceCreationOptions> = {} as any;\n    public readonly timeouts: Set<ReturnType<typeof setTimeout>> = new Set();\n    public incrementalWriteQueue: IncrementalWriteQueue<RxDocumentType> = {} as any;\n\n\n    /**\n     * Before reads, all these methods are awaited. Used to \"block\" reads\n     * depending on other processes, like when the RxPipeline is running.\n     */\n    public readonly awaitBeforeReads = new Set<() => MaybePromise<any>>();\n\n    constructor(\n        public readonly database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions, Reactivity>,\n        public name: string,\n        public schema: RxSchema<RxDocumentType>,\n        public internalStorageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\n        public migrationStrategies: MigrationStrategies = {},\n        public methods: KeyFunctionMap = {},\n        public attachments: KeyFunctionMap = {},\n        public options: any = {},\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\n        public statics: KeyFunctionMap = {},\n        public conflictHandler: RxConflictHandler<RxDocumentType> = defaultConflictHandler\n    ) {\n        _applyHookFunctions(this.asRxCollection);\n\n\n        if (database) { // might be falsy on pseudoInstance\n            this.eventBulks$ = database.eventBulks$.pipe(\n                filter(changeEventBulk => changeEventBulk.collectionName === this.name)\n            );\n        } else { }\n\n\n        /**\n         * Must be last because the hooks might throw on dev-mode\n         * checks and we do not want to have broken collections here.\n         * RxCollection instances created for testings do not have a database\n         * so we do not add these to the list.\n         */\n        if (this.database) {\n            OPEN_COLLECTIONS.add(this);\n        }\n    }\n\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'INSERT')\n        ) as any;\n    }\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'UPDATE')\n        ) as any;\n    }\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'DELETE')\n        ) as any;\n    }\n\n    public _incrementalUpsertQueues: Map<string, Promise<any>> = new Map();\n    // defaults\n    public synced: boolean = false;\n    public hooks: {\n        [key in HookKeyType]: {\n            [when in HookWhenType]: {\n                series: Function[];\n                parallel: Function[];\n            };\n        }\n    } = {} as any;\n    public _subs: Subscription[] = [];\n\n    public _docCache: DocumentCache<RxDocumentType, OrmMethods> = {} as any;\n\n    public _queryCache: QueryCache = createQueryCache();\n    public $: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\n    public checkpoint$: Observable<any> = {} as any;\n    public _changeEventBuffer: ChangeEventBuffer<RxDocumentType> = {} as ChangeEventBuffer<RxDocumentType>;\n\n    /**\n     * Internally only use eventBulks$\n     * Do not use .$ or .observable$ because that has to transform\n     * the events which decreases performance.\n     */\n    public readonly eventBulks$: Observable<RxChangeEventBulk<any>> = {} as any;\n\n\n    /**\n     * When the collection is closed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n    */\n    public onClose: (() => MaybePromise<any>)[] = [];\n    public closed = false;\n\n    public onRemove: (() => MaybePromise<any>)[] = [];\n\n    public async prepare(): Promise<void> {\n\n        if (!(await hasPremiumFlag())) {\n\n            /**\n             * When used in a test suite, we often open and close many databases with collections\n             * while not awaiting the database.close() call to improve the test times.\n             * So when reopening collections and the OPEN_COLLECTIONS size is full,\n             * we retry after some times to account for this.\n             */\n            let count = 0;\n            while (count < 10 && OPEN_COLLECTIONS.size > NON_PREMIUM_COLLECTION_LIMIT) {\n                count++;\n                await this.promiseWait(30);\n            }\n            if (OPEN_COLLECTIONS.size > NON_PREMIUM_COLLECTION_LIMIT) {\n                throw newRxError('COL23', {\n                    database: this.database.name,\n                    collection: this.name,\n                    args: {\n                        existing: Array.from(OPEN_COLLECTIONS.values()).map(c => ({\n                            db: c.database ? c.database.name : '',\n                            c: c.name\n                        }))\n                    }\n                });\n            }\n        }\n\n\n        this.storageInstance = getWrappedStorageInstance(\n            this.database,\n            this.internalStorageInstance,\n            this.schema.jsonSchema\n        );\n        this.incrementalWriteQueue = new IncrementalWriteQueue<RxDocumentType>(\n            this.storageInstance,\n            this.schema.primaryPath,\n            (newData, oldData) => beforeDocumentUpdateWrite(this as any, newData, oldData),\n            result => this._runHooks('post', 'save', result)\n        );\n\n        this.$ = this.eventBulks$.pipe(\n            mergeMap(changeEventBulk => rxChangeEventBulkToRxChangeEvents(changeEventBulk)),\n        );\n        this.checkpoint$ = this.eventBulks$.pipe(\n            map(changeEventBulk => changeEventBulk.checkpoint),\n        );\n\n        this._changeEventBuffer = createChangeEventBuffer<RxDocumentType>(this.asRxCollection);\n        let documentConstructor: any;\n        this._docCache = new DocumentCache(\n            this.schema.primaryPath,\n            this.eventBulks$.pipe(\n                filter(bulk => !bulk.isLocal),\n                map(bulk => bulk.events)\n            ),\n            docData => {\n                if (!documentConstructor) {\n                    documentConstructor = getRxDocumentConstructor(this.asRxCollection);\n                }\n                return createNewRxDocument(this.asRxCollection, documentConstructor, docData);\n            }\n        );\n\n\n        const listenToRemoveSub = this.database.internalStore.changeStream().pipe(\n            filter(bulk => {\n                const key = this.name + '-' + this.schema.version;\n                const found = bulk.events.find(event => {\n                    return (\n                        event.documentData.context === 'collection' &&\n                        event.documentData.key === key &&\n                        event.operation === 'DELETE'\n                    );\n                });\n                return !!found;\n            })\n        ).subscribe(async () => {\n            await this.close();\n            await Promise.all(this.onRemove.map(fn => fn()));\n        });\n        this._subs.push(listenToRemoveSub);\n\n\n        const databaseStorageToken = await this.database.storageToken;\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\n                id: eventBulk.id,\n                isLocal: false,\n                internal: false,\n                collectionName: this.name,\n                storageToken: databaseStorageToken,\n                events: eventBulk.events,\n                databaseToken: this.database.token,\n                checkpoint: eventBulk.checkpoint,\n                context: eventBulk.context\n            };\n            this.database.$emit(changeEventBulk);\n        });\n        this._subs.push(subDocs);\n\n        return PROMISE_RESOLVE_VOID;\n    }\n\n\n    /**\n     * Manually call the cleanup function of the storage.\n     * @link https://rxdb.info/cleanup.html\n     */\n    cleanup(_minimumDeletedTime?: number): Promise<boolean> {\n        ensureRxCollectionIsNotClosed(this);\n        throw pluginMissing('cleanup');\n    }\n\n    // overwritten by migration-plugin\n    migrationNeeded(): Promise<boolean> {\n        throw pluginMissing('migration-schema');\n    }\n    getMigrationState(): RxMigrationState {\n        throw pluginMissing('migration-schema');\n    }\n    startMigration(batchSize: number = 10): Promise<void> {\n        ensureRxCollectionIsNotClosed(this);\n        return this.getMigrationState().startMigration(batchSize);\n    }\n    migratePromise(batchSize: number = 10): Promise<any> {\n        return this.getMigrationState().migratePromise(batchSize);\n    }\n\n    async insert(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        ensureRxCollectionIsNotClosed(this);\n        const writeResult = await this.bulkInsert([json as any]);\n\n        const isError = writeResult.error[0];\n        throwIfIsStorageWriteError(this as any, (json as any)[this.schema.primaryPath] as any, json, isError as any);\n        const insertResult = ensureNotFalsy(writeResult.success[0]);\n        return insertResult;\n    }\n\n    async insertIfNotExists(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const writeResult = await this.bulkInsert([json as any]);\n        if (writeResult.error.length > 0) {\n            const error = writeResult.error[0];\n            if (error.status === 409) {\n                const conflictDocData = error.documentInDb;\n                return mapDocumentsDataToCacheDocs(this._docCache, [conflictDocData])[0];\n\n            } else {\n                throw error;\n            }\n        }\n        return writeResult.success[0];\n    }\n\n    async bulkInsert(\n        docsData: RxDocumentType[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        ensureRxCollectionIsNotClosed(this);\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n        */\n        if (docsData.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const primaryPath = this.schema.primaryPath;\n\n        const ids = new Set<string>();\n\n        /**\n         * This code is a bit redundant for better performance.\n         * Instead of iterating multiple times,\n         * we directly transform the input to a write-row array.\n         */\n        let insertRows: BulkWriteRow<RxDocumentType>[];\n        if (this.hasHooks('pre', 'insert')) {\n            insertRows = await Promise.all(\n                docsData.map(docData => {\n                    const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\n                    return this._runHooks('pre', 'insert', useDocData)\n                        .then(() => {\n                            ids.add((useDocData as any)[primaryPath]);\n                            return { document: useDocData };\n                        });\n                })\n            );\n        } else {\n            insertRows = new Array(docsData.length);\n            const schema = this.schema;\n            for (let index = 0; index < docsData.length; index++) {\n                const docData = docsData[index];\n                const useDocData = fillObjectDataBeforeInsert(schema, docData);\n                ids.add((useDocData as any)[primaryPath]);\n                insertRows[index] = { document: useDocData };\n            }\n        }\n\n\n        if (ids.size !== docsData.length) {\n            throw newRxError('COL22', {\n                collection: this.name,\n                args: {\n                    documents: docsData\n                }\n            });\n        }\n\n        const results = await this.storageInstance.bulkWrite(\n            insertRows,\n            'rx-collection-bulk-insert'\n        );\n\n\n        /**\n         * Often the user does not need to access the RxDocuments of the bulkInsert() call.\n         * So we transform the data to RxDocuments only if needed to use less CPU performance.\n         */\n        let rxDocuments: RxDocument<RxDocumentType, OrmMethods>[];\n        const collection = this;\n        const ret = {\n            get success() {\n                if (!rxDocuments) {\n                    const success = getWrittenDocumentsFromBulkWriteResponse(\n                        collection.schema.primaryPath,\n                        insertRows,\n                        results\n                    );\n                    rxDocuments = mapDocumentsDataToCacheDocs<RxDocumentType, OrmMethods>(collection._docCache, success);\n                }\n                return rxDocuments;\n            },\n            error: results.error\n        };\n\n        if (this.hasHooks('post', 'insert')) {\n            const docsMap: Map<string, RxDocumentType> = new Map();\n            insertRows.forEach(row => {\n                const doc = row.document;\n                docsMap.set((doc as any)[primaryPath] as any, doc);\n            });\n            await Promise.all(\n                ret.success.map(doc => {\n                    return this._runHooks(\n                        'post',\n                        'insert',\n                        docsMap.get(doc.primary),\n                        doc\n                    );\n                })\n            );\n        }\n\n        return ret;\n    }\n\n    async bulkRemove(\n        /**\n         * You can either remove the documents by their ids\n         * or by directly providing the RxDocument instances\n         * if you have them already. This improves performance a bit.\n         */\n        idsOrDocs: string[] | RxDocument<RxDocumentType>[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        ensureRxCollectionIsNotClosed(this);\n        const primaryPath = this.schema.primaryPath;\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (idsOrDocs.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        let rxDocumentMap: Map<string, RxDocument<RxDocumentType, OrmMethods>>;\n        if (typeof idsOrDocs[0] === 'string') {\n            rxDocumentMap = await this.findByIds(idsOrDocs as string[]).exec();\n        } else {\n            rxDocumentMap = new Map();\n            (idsOrDocs as RxDocument<RxDocumentType, OrmMethods>[]).forEach(d => rxDocumentMap.set(d.primary, d));\n        }\n\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\n            const data: RxDocumentData<RxDocumentType> = rxDocument.toMutableJSON(true) as any;\n            docsData.push(data);\n            docsMap.set(rxDocument.primary, data);\n        });\n\n        await Promise.all(\n            docsData.map(doc => {\n                const primary = (doc as any)[this.schema.primaryPath];\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\n            })\n        );\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\n            const writeDoc = flatClone(doc);\n            writeDoc._deleted = true;\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        const results = await this.storageInstance.bulkWrite(\n            removeDocs,\n            'rx-collection-bulk-remove'\n        );\n\n\n        const success = getWrittenDocumentsFromBulkWriteResponse(\n            this.schema.primaryPath,\n            removeDocs,\n            results\n        );\n\n        const deletedRxDocuments: RxDocument<RxDocumentType, OrmMethods>[] = [];\n        const successIds: string[] = success.map(d => {\n            const id = d[primaryPath] as string;\n            const doc = this._docCache.getCachedRxDocument(d);\n            deletedRxDocuments.push(doc);\n            return id;\n        });\n\n        // run hooks\n        await Promise.all(\n            successIds.map(id => {\n                return this._runHooks(\n                    'post',\n                    'remove',\n                    docsMap.get(id),\n                    rxDocumentMap.get(id)\n                );\n            })\n        );\n\n\n        return {\n            success: deletedRxDocuments,\n            error: results.error\n        };\n    }\n\n    /**\n     * same as bulkInsert but overwrites existing document with same primary\n     */\n    async bulkUpsert(docsData: Partial<RxDocumentType>[]): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        ensureRxCollectionIsNotClosed(this);\n        const insertData: RxDocumentType[] = [];\n        const useJsonByDocId: Map<string, RxDocumentType> = new Map();\n        docsData.forEach(docData => {\n            const useJson = fillObjectDataBeforeInsert(this.schema, docData);\n            const primary: string = useJson[this.schema.primaryPath] as any;\n            if (!primary) {\n                throw newRxError('COL3', {\n                    primaryPath: this.schema.primaryPath as string,\n                    data: useJson,\n                    schema: this.schema.jsonSchema\n                });\n            }\n            useJsonByDocId.set(primary, useJson);\n            insertData.push(useJson);\n        });\n\n        const insertResult = await this.bulkInsert(insertData);\n        const success = insertResult.success.slice(0);\n        const error: RxStorageWriteError<RxDocumentType>[] = [];\n\n        // update the ones that existed already\n        await Promise.all(\n            insertResult.error.map(async (err) => {\n                if (err.status !== 409) {\n                    error.push(err);\n                } else {\n                    const id = err.documentId;\n                    const writeData = getFromMapOrThrow(useJsonByDocId, id);\n                    const docDataInDb = ensureNotFalsy(err.documentInDb);\n                    const doc = this._docCache.getCachedRxDocuments([docDataInDb])[0];\n                    const newDoc = await doc.incrementalModify(() => writeData);\n                    success.push(newDoc);\n                }\n            })\n        );\n        return {\n            error,\n            success\n        };\n    }\n\n    /**\n     * same as insert but overwrites existing document with same primary\n     */\n    async upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        ensureRxCollectionIsNotClosed(this);\n        const bulkResult = await this.bulkUpsert([json]);\n        throwIfIsStorageWriteError<RxDocumentType>(\n            this.asRxCollection,\n            (json as any)[this.schema.primaryPath],\n            json as any,\n            bulkResult.error[0]\n        );\n        return bulkResult.success[0];\n    }\n\n    /**\n     * upserts to a RxDocument, uses incrementalModify if document already exists\n     */\n    incrementalUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        ensureRxCollectionIsNotClosed(this);\n        const useJson = fillObjectDataBeforeInsert(this.schema, json);\n        const primary: string = useJson[this.schema.primaryPath] as any;\n        if (!primary) {\n            throw newRxError('COL4', {\n                data: json\n            });\n        }\n\n        // ensure that it won't try 2 parallel runs\n        let queue = this._incrementalUpsertQueues.get(primary);\n        if (!queue) {\n            queue = PROMISE_RESOLVE_VOID;\n        }\n        queue = queue\n            .then(() => _incrementalUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\n            .then((wasInserted) => {\n                if (!wasInserted.inserted) {\n                    return _incrementalUpsertUpdate(wasInserted.doc, useJson);\n                } else {\n                    return wasInserted.doc;\n                }\n            });\n        this._incrementalUpsertQueues.set(primary, queue);\n        return queue;\n    }\n\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>[],\n        OrmMethods,\n        Reactivity\n    > {\n        ensureRxCollectionIsNotClosed(this);\n\n        runPluginHooks('prePrepareRxQuery', {\n            op: 'find',\n            queryObj,\n            collection: this\n        });\n\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n\n        const query = createRxQuery('find', queryObj, this as any);\n        return query as any;\n    }\n\n    findOne(\n        queryObj?: MangoQueryNoLimit<RxDocumentType> | string\n    ): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods> | null,\n        OrmMethods,\n        Reactivity\n    > {\n        ensureRxCollectionIsNotClosed(this);\n\n        runPluginHooks('prePrepareRxQuery', {\n            op: 'findOne',\n            queryObj,\n            collection: this\n        });\n\n        let query;\n\n        if (typeof queryObj === 'string') {\n            query = createRxQuery('findOne', {\n                selector: {\n                    [this.schema.primaryPath]: queryObj\n                },\n                limit: 1\n            }, this as any);\n        } else {\n            if (!queryObj) {\n                queryObj = _getDefaultQuery();\n            }\n\n            // cannot have limit on findOne queries because it will be overwritten\n            if ((queryObj as MangoQuery).limit) {\n                throw newRxError('QU6');\n            }\n\n            queryObj = flatClone(queryObj);\n            (queryObj as any).limit = 1;\n            query = createRxQuery<RxDocumentType>('findOne', queryObj, this as any);\n        }\n\n\n        return query as any;\n    }\n\n    count(queryObj?: MangoQuerySelectorAndIndex<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        number,\n        OrmMethods,\n        Reactivity\n    > {\n        ensureRxCollectionIsNotClosed(this);\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n        const query = createRxQuery('count', queryObj, this as any);\n        return query as any;\n    }\n\n    /**\n     * find a list documents by their primary key\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\n     */\n    findByIds(\n        ids: string[]\n    ): RxQuery<\n        RxDocumentType,\n        Map<string, RxDocument<RxDocumentType, OrmMethods>>,\n        OrmMethods,\n        Reactivity\n    > {\n        ensureRxCollectionIsNotClosed(this);\n        const mangoQuery: MangoQuery<RxDocumentType> = {\n            selector: {\n                [this.schema.primaryPath]: {\n                    $in: ids.slice(0)\n                }\n            } as any\n        };\n        const query = createRxQuery('findByIds', mangoQuery, this as any);\n        return query as any;\n    }\n\n    /**\n     * Export collection to a JSON friendly format.\n     */\n    exportJSON(): Promise<RxDumpCollection<RxDocumentType>>;\n    exportJSON(): Promise<RxDumpCollectionAny<RxDocumentType>>;\n    exportJSON(): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\n     */\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    insertCRDT(_updateObj: CRDTEntry<any> | CRDTEntry<any>[]): RxDocument<RxDocumentType, OrmMethods> {\n        throw pluginMissing('crdt');\n    }\n\n\n    addPipeline(_options: RxPipelineOptions<RxDocumentType>): Promise<RxPipeline<RxDocumentType>> {\n        throw pluginMissing('pipeline');\n    }\n\n    /**\n     * HOOKS\n     */\n    addHook(when: HookWhenType, key: HookKeyType, fun: any, parallel = false) {\n        if (typeof fun !== 'function') {\n            throw newRxTypeError('COL7', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_WHEN.includes(when)) {\n            throw newRxTypeError('COL8', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_KEYS.includes(key)) {\n            throw newRxError('COL9', {\n                key\n            });\n        }\n\n        if (when === 'post' && key === 'create' && parallel === true) {\n            throw newRxError('COL10', {\n                when,\n                key,\n                parallel\n            });\n        }\n\n        // bind this-scope to hook-function\n        const boundFun = fun.bind(this);\n\n        const runName = parallel ? 'parallel' : 'series';\n\n        this.hooks[key] = this.hooks[key] || {};\n        this.hooks[key][when] = this.hooks[key][when] || {\n            series: [],\n            parallel: []\n        };\n        this.hooks[key][when][runName].push(boundFun);\n    }\n\n    getHooks(when: HookWhenType, key: HookKeyType) {\n        if (\n            !this.hooks[key] ||\n            !this.hooks[key][when]\n        ) {\n            return {\n                series: [],\n                parallel: []\n            };\n        }\n        return this.hooks[key][when];\n    }\n\n    hasHooks(when: HookWhenType, key: HookKeyType) {\n        /**\n         * Performance shortcut\n         * so that we not have to build the empty object.\n         */\n        if (\n            !this.hooks[key] ||\n            !this.hooks[key][when]\n        ) {\n            return false;\n        }\n\n        const hooks = this.getHooks(when, key);\n        if (!hooks) {\n            return false;\n        }\n        return hooks.series.length > 0 || hooks.parallel.length > 0;\n    }\n\n    _runHooks(when: HookWhenType, key: HookKeyType, data: any, instance?: any): Promise<any> {\n        const hooks = this.getHooks(when, key);\n\n        if (!hooks) {\n            return PROMISE_RESOLVE_VOID;\n        }\n\n        // run parallel: false\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\n        return promiseSeries(tasks)\n            // run parallel: true\n            .then(() => Promise.all(\n                hooks.parallel\n                    .map((hook: any) => hook(data, instance))\n            ));\n    }\n\n    /**\n     * does the same as ._runHooks() but with non-async-functions\n     */\n    _runHooksSync(when: HookWhenType, key: HookKeyType, data: any, instance: any) {\n        if (!this.hasHooks(when, key)) {\n            return;\n        }\n        const hooks = this.getHooks(when, key);\n        if (!hooks) return;\n        hooks.series.forEach((hook: any) => hook(data, instance));\n    }\n\n    /**\n     * Returns a promise that resolves after the given time.\n     * Ensures that is properly cleans up when the collection is closed\n     * so that no running timeouts prevent the exit of the JavaScript process.\n     */\n    promiseWait(time: number): Promise<void> {\n        const ret = new Promise<void>(res => {\n            const timeout = setTimeout(() => {\n                this.timeouts.delete(timeout);\n                res();\n            }, time);\n            this.timeouts.add(timeout);\n        });\n        return ret;\n    }\n\n    async close(): Promise<boolean> {\n        if (this.closed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        OPEN_COLLECTIONS.delete(this);\n\n\n        await Promise.all(this.onClose.map(fn => fn()));\n\n        /**\n         * Settings closed = true\n         * must be the first thing to do,\n         * so for example the replication can directly stop\n         * instead of sending requests to a closed storage.\n         */\n        this.closed = true;\n\n\n        Array.from(this.timeouts).forEach(timeout => clearTimeout(timeout));\n        if (this._changeEventBuffer) {\n            this._changeEventBuffer.close();\n        }\n        /**\n         * First wait until the whole database is idle.\n         * This ensures that the storage does not get closed\n         * while some operation is running.\n         * It is important that we do not intercept a running call\n         * because it might lead to undefined behavior like when a doc is written\n         * but the change is not added to the changes collection.\n         */\n        return this.database.requestIdlePromise()\n            .then(() => this.storageInstance.close())\n            .then(() => {\n                /**\n                 * Unsubscribing must be done AFTER the storageInstance.close()\n                 * Because the conflict handling is part of the subscriptions and\n                 * otherwise there might be open conflicts to be resolved which\n                 * will then stuck and never resolve.\n                 */\n                this._subs.forEach(sub => sub.unsubscribe());\n\n                delete this.database.collections[this.name];\n                return runAsyncPluginHooks('postCloseRxCollection', this).then(() => true);\n            });\n    }\n\n    /**\n     * remove all data of the collection\n     */\n    async remove(): Promise<any> {\n        await this.close();\n        await Promise.all(this.onRemove.map(fn => fn()));\n        /**\n         * TODO here we should pass the already existing\n         * storage instances instead of creating new ones.\n         */\n        await removeCollectionStorages(\n            this.database.storage,\n            this.database.internalStore,\n            this.database.token,\n            this.database.name,\n            this.name,\n            this.database.multiInstance,\n            this.database.password,\n            this.database.hashFunction\n        );\n    }\n\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods, any, Reactivity> {\n        return this as any;\n    }\n}\n\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\nfunction _applyHookFunctions(\n    collection: RxCollection<any, any>\n) {\n    if (hooksApplied) return; // already run\n    hooksApplied = true;\n    const colProto = Object.getPrototypeOf(collection);\n    HOOKS_KEYS.forEach(key => {\n        HOOKS_WHEN.map(when => {\n            const fnName = when + ucfirst(key);\n            colProto[fnName] = function (fun: string, parallel: boolean) {\n                return this.addHook(when, key, fun, parallel);\n            };\n        });\n    });\n}\n\nfunction _incrementalUpsertUpdate<RxDocType>(\n    doc: RxDocumentBase<RxDocType>,\n    json: RxDocumentData<RxDocType>\n): Promise<RxDocumentBase<RxDocType>> {\n    return doc.incrementalModify((_innerDoc) => {\n        return json;\n    });\n}\n\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\nfunction _incrementalUpsertEnsureRxDocumentExists<RxDocType>(\n    rxCollection: RxCollection<RxDocType>,\n    primary: string,\n    json: any\n): Promise<\n    {\n        doc: RxDocument<RxDocType>;\n        inserted: boolean;\n    }\n> {\n    /**\n     * Optimisation shortcut,\n     * first try to find the document in the doc-cache\n     */\n    const docDataFromCache = rxCollection._docCache.getLatestDocumentDataIfExists(primary);\n    if (docDataFromCache) {\n        return Promise.resolve({\n            doc: rxCollection._docCache.getCachedRxDocuments([docDataFromCache])[0],\n            inserted: false\n        });\n    }\n    return rxCollection.findOne(primary).exec()\n        .then(doc => {\n            if (!doc) {\n                return rxCollection.insert(json).then(newDoc => ({\n                    doc: newDoc,\n                    inserted: true\n                }));\n            } else {\n                return {\n                    doc,\n                    inserted: false\n                };\n            }\n        });\n}\n\n/**\n * creates and prepares a new collection\n */\nexport function createRxCollection(\n    {\n        database,\n        name,\n        schema,\n        instanceCreationOptions = {},\n        migrationStrategies = {},\n        autoMigrate = true,\n        statics = {},\n        methods = {},\n        attachments = {},\n        options = {},\n        localDocuments = false,\n        cacheReplacementPolicy = defaultCacheReplacementPolicy,\n        conflictHandler = defaultConflictHandler\n    }: any\n): Promise<RxCollection> {\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseInstanceToken: database.token,\n        databaseName: database.name,\n        collectionName: name,\n        schema: schema.jsonSchema,\n        options: instanceCreationOptions,\n        multiInstance: database.multiInstance,\n        password: database.password,\n        devMode: overwritable.isDevMode()\n    };\n\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    return createRxCollectionStorageInstance(\n        database,\n        storageInstanceCreationParams\n    ).then(storageInstance => {\n        const collection = new RxCollectionBase(\n            database,\n            name,\n            schema,\n            storageInstance,\n            instanceCreationOptions,\n            migrationStrategies,\n            methods,\n            attachments,\n            options,\n            cacheReplacementPolicy,\n            statics,\n            conflictHandler\n        );\n\n        return collection\n            .prepare()\n            .then(() => {\n                // ORM add statics\n                Object\n                    .entries(statics)\n                    .forEach(([funName, fun]) => {\n                        Object.defineProperty(collection, funName, {\n                            get: () => (fun as any).bind(collection)\n                        });\n                    });\n\n                let ret = PROMISE_RESOLVE_VOID;\n                if (autoMigrate && collection.schema.version !== 0) {\n                    ret = collection.migratePromise();\n                }\n                return ret;\n            })\n            .then(() => {\n                runPluginHooks('createRxCollection', {\n                    collection,\n                    creator: {\n                        name,\n                        schema,\n                        storageInstance,\n                        instanceCreationOptions,\n                        migrationStrategies,\n                        methods,\n                        attachments,\n                        options,\n                        cacheReplacementPolicy,\n                        localDocuments,\n                        statics\n                    }\n                });\n                return collection as any;\n            })\n            /**\n             * If the collection creation fails,\n             * we yet have to close the storage instances.\n             */\n            .catch(err => {\n                OPEN_COLLECTIONS.delete(collection);\n                return storageInstance.close()\n                    .then(() => Promise.reject(err as Error));\n            });\n    });\n}\n\nexport function isRxCollection(obj: any): boolean {\n    return obj instanceof RxCollectionBase;\n}\n"],"mappings":"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","ignoreList":[]}