"use strict";(self.webpackChunkrxdb=self.webpackChunkrxdb||[]).push([[3822],{1685:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(4848),s=n(8453);const r={title:"\ud83d\ude80 Quickstart",slug:"quickstart.html",description:"Learn how to build a realtime app with RxDB. Follow this quickstart for setup, schema creation, data operations, and real-time syncing."},i="RxDB Quickstart",o={id:"quickstart",title:"\ud83d\ude80 Quickstart",description:"Learn how to build a realtime app with RxDB. Follow this quickstart for setup, schema creation, data operations, and real-time syncing.",source:"@site/docs/quickstart.md",sourceDirName:".",slug:"/quickstart.html",permalink:"/quickstart.html",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"\ud83d\ude80 Quickstart",slug:"quickstart.html",description:"Learn how to build a realtime app with RxDB. Follow this quickstart for setup, schema creation, data operations, and real-time syncing."},sidebar:"tutorialSidebar",next:{title:"Installation",permalink:"/install.html"}},l={},d=[{value:"1. Installation",id:"1-installation",level:3},{value:"2. Import",id:"2-import",level:3},{value:"3. Dev-Mode",id:"3-dev-mode",level:3},{value:"4. Create a Database",id:"4-create-a-database",level:3},{value:"5. Add a Collection",id:"5-add-a-collection",level:3},{value:"6. Insert a document",id:"6-insert-a-document",level:3},{value:"7. Run a Query",id:"7-run-a-query",level:3},{value:"8. Update a Document",id:"8-update-a-document",level:3},{value:"9. Delete a document",id:"9-delete-a-document",level:3},{value:"10. Observe a Query",id:"10-observe-a-query",level:3},{value:"11. Observe a Document value",id:"11-observe-a-document-value",level:3},{value:"12. Start the Replication",id:"12-start-the-replication",level:3},{value:"Next steps",id:"next-steps",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"rxdb-quickstart",children:"RxDB Quickstart"}),"\n",(0,a.jsx)(t.p,{children:"Welcome to the RxDB Quickstart. Here we'll learn how to create a simple real-time app with the RxDB database that is able to store and query data persistently in a browser and does realtime updates to the UI on changes."}),"\n",(0,a.jsx)("center",{children:(0,a.jsx)("a",{href:"https://rxdb.info/",children:(0,a.jsx)("img",{src:"/files/logo/rxdb_javascript_database.svg",alt:"JavaScript Embedded Database",width:"220"})})}),"\n",(0,a.jsx)(t.h3,{id:"1-installation",children:"1. Installation"}),"\n",(0,a.jsx)(t.p,{children:"Install the RxDB library and the RxJS dependency:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npm install rxdb rxjs\n"})}),"\n",(0,a.jsx)(t.h3,{id:"2-import",children:"2. Import"}),"\n",(0,a.jsx)(t.p,{children:"Import RxDB and the dev-mode plugin, the Dexie-based storage (IndexedDB) and a schema validator:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import { addRxPlugin, createRxDatabase } from 'rxdb/plugins/core';\nimport { RxDBDevModePlugin } from 'rxdb/plugins/dev-mode';\nimport { getRxStorageDexie } from 'rxdb/plugins/storage-dexie';\nimport { wrappedValidateAjvStorage } from 'rxdb/plugins/validate-ajv';\n"})}),"\n",(0,a.jsx)(t.h3,{id:"3-dev-mode",children:"3. Dev-Mode"}),"\n",(0,a.jsxs)(t.p,{children:["When you use RxDB in development, you should always enable the ",(0,a.jsx)(t.a,{href:"/dev-mode.html",children:"dev-mode plugin"}),", which adds helpful checks and validations, and tells you if you do something wrong."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"addRxPlugin(RxDBDevModePlugin);\n"})}),"\n",(0,a.jsx)(t.h3,{id:"4-create-a-database",children:"4. Create a Database"}),"\n",(0,a.jsxs)(t.p,{children:["For the database, here we use the ",(0,a.jsx)(t.a,{href:"/rx-storage-dexie.html",children:"RxDB Dexie Storage"})," that stores data inside of IndexedDB in a browser. For other JavaScript runtimes, you would not use the dexie storage but one of the other ",(0,a.jsx)(t.a,{href:"/rx-storage.html",children:"RxDB Storages"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const myDatabase = await createRxDatabase({\n  name: 'mydatabase',\n  storage: wrappedValidateAjvStorage({\n    storage: getRxStorageDexie()\n  })\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"5-add-a-collection",children:"5. Add a Collection"}),"\n",(0,a.jsxs)(t.p,{children:["An RxDatabase contains ",(0,a.jsx)(t.a,{href:"/rx-collection.html",children:"RxCollection"}),"s for storing and querying data. A collection is similar to an SQL table, and individual records are stored in the collection as JSON documents. An ",(0,a.jsx)(t.a,{href:"/rx-database.html",children:"RxDatabase"})," can have as many collections as you need.\nAdd a collection with a ",(0,a.jsx)(t.a,{href:"/rx-schema.html",children:"schema"})," to the database:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"await myDatabase.addCollections({\n    // name of the collection\n    todos: {\n        // we use the JSON-schema standard\n        schema: {\n            version: 0,\n            primaryKey: 'id',\n            type: 'object',\n            properties: {\n                id: {\n                    type: 'string',\n                    maxLength: 100 // <- the primary key must have maxLength\n                },\n                name: {\n                    type: 'string'\n                },\n                done: {\n                    type: 'boolean'\n                },\n                timestamp: {\n                    type: 'string',\n                    format: 'date-time'\n                }\n            },\n            required: ['id', 'name', 'done', 'timestamp']        \n        }\n    }\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"6-insert-a-document",children:"6. Insert a document"}),"\n",(0,a.jsxs)(t.p,{children:["Now that we have an RxCollection we can store some ",(0,a.jsx)(t.a,{href:"/rx-document.html",children:"documents"})," in it."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const myDocument = await myDatabase.todos.insert({\n    id: 'todo1',\n    name: 'Learn RxDB',\n    done: false,\n    timestamp: new Date().toISOString()\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"7-run-a-query",children:"7. Run a Query"}),"\n",(0,a.jsxs)(t.p,{children:["Execute a ",(0,a.jsx)(t.a,{href:"/rx-query.html",children:"query"})," that returns all found documents once:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const foundDocuments = await myDatabase.todos.find({\n    selector: {\n        done: {\n            $eq: false\n        }\n    }\n}).exec();\n"})}),"\n",(0,a.jsx)(t.h3,{id:"8-update-a-document",children:"8. Update a Document"}),"\n",(0,a.jsxs)(t.p,{children:["In the first found document, set ",(0,a.jsx)(t.code,{children:"done"})," to ",(0,a.jsx)(t.code,{children:"true"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const firstDocument = foundDocuments[0];\nawait firstDocument.patch({\n    done: true\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"9-delete-a-document",children:"9. Delete a document"}),"\n",(0,a.jsx)(t.p,{children:"Delete the document so that it can no longer be found in queries:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"await firstDocument.remove();\n"})}),"\n",(0,a.jsx)(t.h3,{id:"10-observe-a-query",children:"10. Observe a Query"}),"\n",(0,a.jsxs)(t.p,{children:["Subscribe to data changes so that your UI is always up-to-date with the data stored on disk. RxDB allows you to subscribe to data changes even when the change happens in another part of your application, another browser tab, or during database ",(0,a.jsx)(t.a,{href:"/replication.html",children:"replication/synchronization"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const observable = myDatabase.todos.find({\n    selector: {\n        done: {\n            $eq: false\n        }\n    }\n}).$ // get the observable via RxQuery.$;\nobservable.subscribe(notDoneDocs => {\n    console.log('Currently have ' + notDoneDocs.length + ' things to do');\n    // -> here you would re-render your app to show the updated document list\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"11-observe-a-document-value",children:"11. Observe a Document value"}),"\n",(0,a.jsxs)(t.p,{children:["You can also subscribe to the fields of a single RxDocument. Add the ",(0,a.jsx)(t.code,{children:"$"})," sign to the desired field and then subscribe to the returned observable."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"myDocument.done$.subscribe(isDone => {\n    console.log('done: ' + isDone);\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"12-start-the-replication",children:"12. Start the Replication"}),"\n",(0,a.jsxs)(t.p,{children:["RxDB has multiple ",(0,a.jsx)(t.a,{href:"/replication.html",children:"replication plugins"})," to replicate database state with a server.\nThe easiest way to replicate data between your clients' devices is the ",(0,a.jsx)(t.a,{href:"/replication-webrtc.html",children:"WebRTC replication plugin"})," that replicates data between devices without a centralized server. This makes it easy to try out replication without having to host anything:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import {\n    replicateWebRTC,\n    getConnectionHandlerSimplePeer\n} from 'rxdb/plugins/replication-webrtc';\nreplicateWebRTC({\n    collection: myDatabase.todos,\n    connectionHandlerCreator: getConnectionHandlerSimplePeer({}),\n    topic: '', // <- set any app-specific room id here.\n    secret: 'mysecret',\n    pull: {},\n    push: {}\n})\n"})}),"\n",(0,a.jsx)(t.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,a.jsx)(t.p,{children:"You are now ready to dive deeper into RxDB."}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Start reading the full documentation ",(0,a.jsx)(t.a,{href:"/install.html",children:"here"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:["There is a full implementation of the ",(0,a.jsx)(t.a,{href:"https://github.com/pubkey/rxdb-quickstart",children:"quickstart guide"})," so you can clone that repository and play with the code."]}),"\n",(0,a.jsxs)(t.li,{children:["For frameworks and runtimes like Angular, React Native and others, check out the list of ",(0,a.jsx)(t.a,{href:"https://github.com/pubkey/rxdb/tree/master/examples",children:"example implementations"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:["Also please continue reading the documentation, join the community on our ",(0,a.jsx)(t.a,{href:"/chat/",children:"Discord chat"}),", and star the ",(0,a.jsx)(t.a,{href:"https://github.com/pubkey/rxdb",children:"GitHub repo"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:["If you are using RxDB in a production environment and are able to support its continued development, please take a look at the ",(0,a.jsx)(t.a,{href:"/premium/",children:"\ud83d\udc51 Premium package"})," which includes additional plugins and utilities."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var a=n(6540);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);